{"ast":null,"code":"import { devToolsAdapter } from '../dev/dist/xstate-dev.esm.js';\nclass Mailbox {\n  constructor(_process) {\n    this._process = _process;\n    this._active = false;\n    this._current = null;\n    this._last = null;\n  }\n  start() {\n    this._active = true;\n    this.flush();\n  }\n  clear() {\n    // we can't set _current to null because we might be currently processing\n    // and enqueue following clear shouldnt start processing the enqueued item immediately\n    if (this._current) {\n      this._current.next = null;\n      this._last = this._current;\n    }\n  }\n  enqueue(event) {\n    const enqueued = {\n      value: event,\n      next: null\n    };\n    if (this._current) {\n      this._last.next = enqueued;\n      this._last = enqueued;\n      return;\n    }\n    this._current = enqueued;\n    this._last = enqueued;\n    if (this._active) {\n      this.flush();\n    }\n  }\n  flush() {\n    while (this._current) {\n      // atm the given _process is responsible for implementing proper try/catch handling\n      // we assume here that this won't throw in a way that can affect this mailbox\n      const consumed = this._current;\n      this._process(consumed.value);\n      this._current = consumed.next;\n    }\n    this._last = null;\n  }\n}\nconst STATE_DELIMITER = '.';\nconst TARGETLESS_KEY = '';\nconst NULL_EVENT = '';\nconst STATE_IDENTIFIER = '#';\nconst WILDCARD = '*';\nconst XSTATE_INIT = 'xstate.init';\nconst XSTATE_ERROR = 'xstate.error';\nconst XSTATE_STOP = 'xstate.stop';\n\n/**\n * Returns an event that represents an implicit event that is sent after the\n * specified `delay`.\n *\n * @param delayRef The delay in milliseconds\n * @param id The state node ID where this event is handled\n */\nfunction createAfterEvent(delayRef, id) {\n  return {\n    type: `xstate.after.${delayRef}.${id}`\n  };\n}\n\n/**\n * Returns an event that represents that a final state node has been reached in\n * the parent state node.\n *\n * @param id The final state node's parent state node `id`\n * @param output The data to pass into the event\n */\nfunction createDoneStateEvent(id, output) {\n  return {\n    type: `xstate.done.state.${id}`,\n    output\n  };\n}\n\n/**\n * Returns an event that represents that an invoked service has terminated.\n *\n * An invoked service is terminated when it has reached a top-level final state\n * node, but not when it is canceled.\n *\n * @param invokeId The invoked service ID\n * @param output The data to pass into the event\n */\nfunction createDoneActorEvent(invokeId, output) {\n  return {\n    type: `xstate.done.actor.${invokeId}`,\n    output,\n    actorId: invokeId\n  };\n}\nfunction createErrorActorEvent(id, error) {\n  return {\n    type: `xstate.error.actor.${id}`,\n    error,\n    actorId: id\n  };\n}\nfunction createInitEvent(input) {\n  return {\n    type: XSTATE_INIT,\n    input\n  };\n}\n\n/**\n * This function makes sure that unhandled errors are thrown in a separate\n * macrotask. It allows those errors to be detected by global error handlers and\n * reported to bug tracking services without interrupting our own stack of\n * execution.\n *\n * @param err Error to be thrown\n */\nfunction reportUnhandledError(err) {\n  setTimeout(() => {\n    throw err;\n  });\n}\nconst symbolObservable = (() => typeof Symbol === 'function' && Symbol.observable || '@@observable')();\nfunction matchesState(parentStateId, childStateId) {\n  const parentStateValue = toStateValue(parentStateId);\n  const childStateValue = toStateValue(childStateId);\n  if (typeof childStateValue === 'string') {\n    if (typeof parentStateValue === 'string') {\n      return childStateValue === parentStateValue;\n    }\n\n    // Parent more specific than child\n    return false;\n  }\n  if (typeof parentStateValue === 'string') {\n    return parentStateValue in childStateValue;\n  }\n  return Object.keys(parentStateValue).every(key => {\n    if (!(key in childStateValue)) {\n      return false;\n    }\n    return matchesState(parentStateValue[key], childStateValue[key]);\n  });\n}\nfunction toStatePath(stateId) {\n  if (isArray(stateId)) {\n    return stateId;\n  }\n  let result = [];\n  let segment = '';\n  for (let i = 0; i < stateId.length; i++) {\n    const char = stateId.charCodeAt(i);\n    switch (char) {\n      // \\\n      case 92:\n        // consume the next character\n        segment += stateId[i + 1];\n        // and skip over it\n        i++;\n        continue;\n      // .\n      case 46:\n        result.push(segment);\n        segment = '';\n        continue;\n    }\n    segment += stateId[i];\n  }\n  result.push(segment);\n  return result;\n}\nfunction toStateValue(stateValue) {\n  if (isMachineSnapshot(stateValue)) {\n    return stateValue.value;\n  }\n  if (typeof stateValue !== 'string') {\n    return stateValue;\n  }\n  const statePath = toStatePath(stateValue);\n  return pathToStateValue(statePath);\n}\nfunction pathToStateValue(statePath) {\n  if (statePath.length === 1) {\n    return statePath[0];\n  }\n  const value = {};\n  let marker = value;\n  for (let i = 0; i < statePath.length - 1; i++) {\n    if (i === statePath.length - 2) {\n      marker[statePath[i]] = statePath[i + 1];\n    } else {\n      const previous = marker;\n      marker = {};\n      previous[statePath[i]] = marker;\n    }\n  }\n  return value;\n}\nfunction mapValues(collection, iteratee) {\n  const result = {};\n  const collectionKeys = Object.keys(collection);\n  for (let i = 0; i < collectionKeys.length; i++) {\n    const key = collectionKeys[i];\n    result[key] = iteratee(collection[key], key, collection, i);\n  }\n  return result;\n}\nfunction toArrayStrict(value) {\n  if (isArray(value)) {\n    return value;\n  }\n  return [value];\n}\nfunction toArray(value) {\n  if (value === undefined) {\n    return [];\n  }\n  return toArrayStrict(value);\n}\nfunction resolveOutput(mapper, context, event, self) {\n  if (typeof mapper === 'function') {\n    return mapper({\n      context,\n      event,\n      self\n    });\n  }\n  return mapper;\n}\nfunction isArray(value) {\n  return Array.isArray(value);\n}\nfunction isErrorActorEvent(event) {\n  return event.type.startsWith('xstate.error.actor');\n}\nfunction toTransitionConfigArray(configLike) {\n  return toArrayStrict(configLike).map(transitionLike => {\n    if (typeof transitionLike === 'undefined' || typeof transitionLike === 'string') {\n      return {\n        target: transitionLike\n      };\n    }\n    return transitionLike;\n  });\n}\nfunction normalizeTarget(target) {\n  if (target === undefined || target === TARGETLESS_KEY) {\n    return undefined;\n  }\n  return toArray(target);\n}\nfunction toObserver(nextHandler, errorHandler, completionHandler) {\n  const isObserver = typeof nextHandler === 'object';\n  const self = isObserver ? nextHandler : undefined;\n  return {\n    next: (isObserver ? nextHandler.next : nextHandler)?.bind(self),\n    error: (isObserver ? nextHandler.error : errorHandler)?.bind(self),\n    complete: (isObserver ? nextHandler.complete : completionHandler)?.bind(self)\n  };\n}\nfunction createInvokeId(stateNodeId, index) {\n  return `${index}.${stateNodeId}`;\n}\nfunction resolveReferencedActor(machine, src) {\n  const match = src.match(/^xstate\\.invoke\\.(\\d+)\\.(.*)/);\n  if (!match) {\n    return machine.implementations.actors[src];\n  }\n  const [, indexStr, nodeId] = match;\n  const node = machine.getStateNodeById(nodeId);\n  const invokeConfig = node.config.invoke;\n  return (Array.isArray(invokeConfig) ? invokeConfig[indexStr] : invokeConfig).src;\n}\nfunction getAllOwnEventDescriptors(snapshot) {\n  return [...new Set([...snapshot._nodes.flatMap(sn => sn.ownEvents)])];\n}\nfunction createScheduledEventId(actorRef, id) {\n  return `${actorRef.sessionId}.${id}`;\n}\nlet idCounter = 0;\nfunction createSystem(rootActor, options) {\n  const children = new Map();\n  const keyedActors = new Map();\n  const reverseKeyedActors = new WeakMap();\n  const inspectionObservers = new Set();\n  const timerMap = {};\n  const {\n    clock,\n    logger\n  } = options;\n  const scheduler = {\n    schedule: function (source, target, event, delay) {\n      let id = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Math.random().toString(36).slice(2);\n      const scheduledEvent = {\n        source,\n        target,\n        event,\n        delay,\n        id,\n        startedAt: Date.now()\n      };\n      const scheduledEventId = createScheduledEventId(source, id);\n      system._snapshot._scheduledEvents[scheduledEventId] = scheduledEvent;\n      const timeout = clock.setTimeout(() => {\n        delete timerMap[scheduledEventId];\n        delete system._snapshot._scheduledEvents[scheduledEventId];\n        system._relay(source, target, event);\n      }, delay);\n      timerMap[scheduledEventId] = timeout;\n    },\n    cancel: (source, id) => {\n      const scheduledEventId = createScheduledEventId(source, id);\n      const timeout = timerMap[scheduledEventId];\n      delete timerMap[scheduledEventId];\n      delete system._snapshot._scheduledEvents[scheduledEventId];\n      if (timeout !== undefined) {\n        clock.clearTimeout(timeout);\n      }\n    },\n    cancelAll: actorRef => {\n      for (const scheduledEventId in system._snapshot._scheduledEvents) {\n        const scheduledEvent = system._snapshot._scheduledEvents[scheduledEventId];\n        if (scheduledEvent.source === actorRef) {\n          scheduler.cancel(actorRef, scheduledEvent.id);\n        }\n      }\n    }\n  };\n  const sendInspectionEvent = event => {\n    if (!inspectionObservers.size) {\n      return;\n    }\n    const resolvedInspectionEvent = {\n      ...event,\n      rootId: rootActor.sessionId\n    };\n    inspectionObservers.forEach(observer => observer.next?.(resolvedInspectionEvent));\n  };\n  const system = {\n    _snapshot: {\n      _scheduledEvents: (options?.snapshot && options.snapshot.scheduler) ?? {}\n    },\n    _bookId: () => `x:${idCounter++}`,\n    _register: (sessionId, actorRef) => {\n      children.set(sessionId, actorRef);\n      return sessionId;\n    },\n    _unregister: actorRef => {\n      children.delete(actorRef.sessionId);\n      const systemId = reverseKeyedActors.get(actorRef);\n      if (systemId !== undefined) {\n        keyedActors.delete(systemId);\n        reverseKeyedActors.delete(actorRef);\n      }\n    },\n    get: systemId => {\n      return keyedActors.get(systemId);\n    },\n    _set: (systemId, actorRef) => {\n      const existing = keyedActors.get(systemId);\n      if (existing && existing !== actorRef) {\n        throw new Error(`Actor with system ID '${systemId}' already exists.`);\n      }\n      keyedActors.set(systemId, actorRef);\n      reverseKeyedActors.set(actorRef, systemId);\n    },\n    inspect: observerOrFn => {\n      const observer = toObserver(observerOrFn);\n      inspectionObservers.add(observer);\n      return {\n        unsubscribe() {\n          inspectionObservers.delete(observer);\n        }\n      };\n    },\n    _sendInspectionEvent: sendInspectionEvent,\n    _relay: (source, target, event) => {\n      system._sendInspectionEvent({\n        type: '@xstate.event',\n        sourceRef: source,\n        actorRef: target,\n        event\n      });\n      target._send(event);\n    },\n    scheduler,\n    getSnapshot: () => {\n      return {\n        _scheduledEvents: {\n          ...system._snapshot._scheduledEvents\n        }\n      };\n    },\n    start: () => {\n      const scheduledEvents = system._snapshot._scheduledEvents;\n      system._snapshot._scheduledEvents = {};\n      for (const scheduledId in scheduledEvents) {\n        const {\n          source,\n          target,\n          event,\n          delay,\n          id\n        } = scheduledEvents[scheduledId];\n        scheduler.schedule(source, target, event, delay, id);\n      }\n    },\n    _clock: clock,\n    _logger: logger\n  };\n  return system;\n}\nconst $$ACTOR_TYPE = 1;\n\n// those values are currently used by @xstate/react directly so it's important to keep the assigned values in sync\nlet ProcessingStatus = /*#__PURE__*/function (ProcessingStatus) {\n  ProcessingStatus[ProcessingStatus[\"NotStarted\"] = 0] = \"NotStarted\";\n  ProcessingStatus[ProcessingStatus[\"Running\"] = 1] = \"Running\";\n  ProcessingStatus[ProcessingStatus[\"Stopped\"] = 2] = \"Stopped\";\n  return ProcessingStatus;\n}({});\nconst defaultOptions = {\n  clock: {\n    setTimeout: (fn, ms) => {\n      return setTimeout(fn, ms);\n    },\n    clearTimeout: id => {\n      return clearTimeout(id);\n    }\n  },\n  logger: console.log.bind(console),\n  devTools: false\n};\n\n/**\n * An Actor is a running process that can receive events, send events and change\n * its behavior based on the events it receives, which can cause effects outside\n * of the actor. When you run a state machine, it becomes an actor.\n */\nclass Actor {\n  /**\n   * Creates a new actor instance for the given logic with the provided options,\n   * if any.\n   *\n   * @param logic The logic to create an actor from\n   * @param options Actor options\n   */\n  constructor(logic, options) {\n    this.logic = logic;\n    /** The current internal state of the actor. */\n    this._snapshot = void 0;\n    /**\n     * The clock that is responsible for setting and clearing timeouts, such as\n     * delayed events and transitions.\n     */\n    this.clock = void 0;\n    this.options = void 0;\n    /** The unique identifier for this actor relative to its parent. */\n    this.id = void 0;\n    this.mailbox = new Mailbox(this._process.bind(this));\n    this.observers = new Set();\n    this.eventListeners = new Map();\n    this.logger = void 0;\n    /** @internal */\n    this._processingStatus = ProcessingStatus.NotStarted;\n    // Actor Ref\n    this._parent = void 0;\n    /** @internal */\n    this._syncSnapshot = void 0;\n    this.ref = void 0;\n    // TODO: add typings for system\n    this._actorScope = void 0;\n    this._systemId = void 0;\n    /** The globally unique process ID for this invocation. */\n    this.sessionId = void 0;\n    /** The system to which this actor belongs. */\n    this.system = void 0;\n    this._doneEvent = void 0;\n    this.src = void 0;\n    // array of functions to defer\n    this._deferred = [];\n    const resolvedOptions = {\n      ...defaultOptions,\n      ...options\n    };\n    const {\n      clock,\n      logger,\n      parent,\n      syncSnapshot,\n      id,\n      systemId,\n      inspect\n    } = resolvedOptions;\n    this.system = parent ? parent.system : createSystem(this, {\n      clock,\n      logger\n    });\n    if (inspect && !parent) {\n      // Always inspect at the system-level\n      this.system.inspect(toObserver(inspect));\n    }\n    this.sessionId = this.system._bookId();\n    this.id = id ?? this.sessionId;\n    this.logger = options?.logger ?? this.system._logger;\n    this.clock = options?.clock ?? this.system._clock;\n    this._parent = parent;\n    this._syncSnapshot = syncSnapshot;\n    this.options = resolvedOptions;\n    this.src = resolvedOptions.src ?? logic;\n    this.ref = this;\n    this._actorScope = {\n      self: this,\n      id: this.id,\n      sessionId: this.sessionId,\n      logger: this.logger,\n      defer: fn => {\n        this._deferred.push(fn);\n      },\n      system: this.system,\n      stopChild: child => {\n        if (child._parent !== this) {\n          throw new Error(`Cannot stop child actor ${child.id} of ${this.id} because it is not a child`);\n        }\n        child._stop();\n      },\n      emit: emittedEvent => {\n        const listeners = this.eventListeners.get(emittedEvent.type);\n        const wildcardListener = this.eventListeners.get('*');\n        if (!listeners && !wildcardListener) {\n          return;\n        }\n        const allListeners = new Set([...(listeners ? listeners.values() : []), ...(wildcardListener ? wildcardListener.values() : [])]);\n        for (const handler of Array.from(allListeners)) {\n          handler(emittedEvent);\n        }\n      }\n    };\n\n    // Ensure that the send method is bound to this Actor instance\n    // if destructured\n    this.send = this.send.bind(this);\n    this.system._sendInspectionEvent({\n      type: '@xstate.actor',\n      actorRef: this\n    });\n    if (systemId) {\n      this._systemId = systemId;\n      this.system._set(systemId, this);\n    }\n    this._initState(options?.snapshot ?? options?.state);\n    if (systemId && this._snapshot.status !== 'active') {\n      this.system._unregister(this);\n    }\n  }\n  _initState(persistedState) {\n    try {\n      this._snapshot = persistedState ? this.logic.restoreSnapshot ? this.logic.restoreSnapshot(persistedState, this._actorScope) : persistedState : this.logic.getInitialSnapshot(this._actorScope, this.options?.input);\n    } catch (err) {\n      // if we get here then it means that we assign a value to this._snapshot that is not of the correct type\n      // we can't get the true `TSnapshot & { status: 'error'; }`, it's impossible\n      // so right now this is a lie of sorts\n      this._snapshot = {\n        status: 'error',\n        output: undefined,\n        error: err\n      };\n    }\n  }\n  update(snapshot, event) {\n    // Update state\n    this._snapshot = snapshot;\n\n    // Execute deferred effects\n    let deferredFn;\n    while (deferredFn = this._deferred.shift()) {\n      try {\n        deferredFn();\n      } catch (err) {\n        // this error can only be caught when executing *initial* actions\n        // it's the only time when we call actions provided by the user through those deferreds\n        // when the actor is already running we always execute them synchronously while transitioning\n        // no \"builtin deferred\" should actually throw an error since they are either safe\n        // or the control flow is passed through the mailbox and errors should be caught by the `_process` used by the mailbox\n        this._deferred.length = 0;\n        this._snapshot = {\n          ...snapshot,\n          status: 'error',\n          error: err\n        };\n      }\n    }\n    switch (this._snapshot.status) {\n      case 'active':\n        for (const observer of this.observers) {\n          try {\n            observer.next?.(snapshot);\n          } catch (err) {\n            reportUnhandledError(err);\n          }\n        }\n        break;\n      case 'done':\n        // next observers are meant to be notified about done snapshots\n        // this can be seen as something that is different from how observable work\n        // but with observables `complete` callback is called without any arguments\n        // it's more ergonomic for XState to treat a done snapshot as a \"next\" value\n        // and the completion event as something that is separate,\n        // something that merely follows emitting that done snapshot\n        for (const observer of this.observers) {\n          try {\n            observer.next?.(snapshot);\n          } catch (err) {\n            reportUnhandledError(err);\n          }\n        }\n        this._stopProcedure();\n        this._complete();\n        this._doneEvent = createDoneActorEvent(this.id, this._snapshot.output);\n        if (this._parent) {\n          this.system._relay(this, this._parent, this._doneEvent);\n        }\n        break;\n      case 'error':\n        this._error(this._snapshot.error);\n        break;\n    }\n    this.system._sendInspectionEvent({\n      type: '@xstate.snapshot',\n      actorRef: this,\n      event,\n      snapshot\n    });\n  }\n\n  /**\n   * Subscribe an observer to an actor’s snapshot values.\n   *\n   * @remarks\n   * The observer will receive the actor’s snapshot value when it is emitted.\n   * The observer can be:\n   *\n   * - A plain function that receives the latest snapshot, or\n   * - An observer object whose `.next(snapshot)` method receives the latest\n   *   snapshot\n   *\n   * @example\n   *\n   * ```ts\n   * // Observer as a plain function\n   * const subscription = actor.subscribe((snapshot) => {\n   *   console.log(snapshot);\n   * });\n   * ```\n   *\n   * @example\n   *\n   * ```ts\n   * // Observer as an object\n   * const subscription = actor.subscribe({\n   *   next(snapshot) {\n   *     console.log(snapshot);\n   *   },\n   *   error(err) {\n   *     // ...\n   *   },\n   *   complete() {\n   *     // ...\n   *   }\n   * });\n   * ```\n   *\n   * The return value of `actor.subscribe(observer)` is a subscription object\n   * that has an `.unsubscribe()` method. You can call\n   * `subscription.unsubscribe()` to unsubscribe the observer:\n   *\n   * @example\n   *\n   * ```ts\n   * const subscription = actor.subscribe((snapshot) => {\n   *   // ...\n   * });\n   *\n   * // Unsubscribe the observer\n   * subscription.unsubscribe();\n   * ```\n   *\n   * When the actor is stopped, all of its observers will automatically be\n   * unsubscribed.\n   *\n   * @param observer - Either a plain function that receives the latest\n   *   snapshot, or an observer object whose `.next(snapshot)` method receives\n   *   the latest snapshot\n   */\n\n  subscribe(nextListenerOrObserver, errorListener, completeListener) {\n    const observer = toObserver(nextListenerOrObserver, errorListener, completeListener);\n    if (this._processingStatus !== ProcessingStatus.Stopped) {\n      this.observers.add(observer);\n    } else {\n      switch (this._snapshot.status) {\n        case 'done':\n          try {\n            observer.complete?.();\n          } catch (err) {\n            reportUnhandledError(err);\n          }\n          break;\n        case 'error':\n          {\n            const err = this._snapshot.error;\n            if (!observer.error) {\n              reportUnhandledError(err);\n            } else {\n              try {\n                observer.error(err);\n              } catch (err) {\n                reportUnhandledError(err);\n              }\n            }\n            break;\n          }\n      }\n    }\n    return {\n      unsubscribe: () => {\n        this.observers.delete(observer);\n      }\n    };\n  }\n  on(type, handler) {\n    let listeners = this.eventListeners.get(type);\n    if (!listeners) {\n      listeners = new Set();\n      this.eventListeners.set(type, listeners);\n    }\n    const wrappedHandler = handler.bind(undefined);\n    listeners.add(wrappedHandler);\n    return {\n      unsubscribe: () => {\n        listeners.delete(wrappedHandler);\n      }\n    };\n  }\n\n  /** Starts the Actor from the initial state */\n  start() {\n    if (this._processingStatus === ProcessingStatus.Running) {\n      // Do not restart the service if it is already started\n      return this;\n    }\n    if (this._syncSnapshot) {\n      this.subscribe({\n        next: snapshot => {\n          if (snapshot.status === 'active') {\n            this.system._relay(this, this._parent, {\n              type: `xstate.snapshot.${this.id}`,\n              snapshot\n            });\n          }\n        },\n        error: () => {}\n      });\n    }\n    this.system._register(this.sessionId, this);\n    if (this._systemId) {\n      this.system._set(this._systemId, this);\n    }\n    this._processingStatus = ProcessingStatus.Running;\n\n    // TODO: this isn't correct when rehydrating\n    const initEvent = createInitEvent(this.options.input);\n    this.system._sendInspectionEvent({\n      type: '@xstate.event',\n      sourceRef: this._parent,\n      actorRef: this,\n      event: initEvent\n    });\n    const status = this._snapshot.status;\n    switch (status) {\n      case 'done':\n        // a state machine can be \"done\" upon initialization (it could reach a final state using initial microsteps)\n        // we still need to complete observers, flush deferreds etc\n        this.update(this._snapshot, initEvent);\n        // TODO: rethink cleanup of observers, mailbox, etc\n        return this;\n      case 'error':\n        this._error(this._snapshot.error);\n        return this;\n    }\n    if (!this._parent) {\n      this.system.start();\n    }\n    if (this.logic.start) {\n      try {\n        this.logic.start(this._snapshot, this._actorScope);\n      } catch (err) {\n        this._snapshot = {\n          ...this._snapshot,\n          status: 'error',\n          error: err\n        };\n        this._error(err);\n        return this;\n      }\n    }\n\n    // TODO: this notifies all subscribers but usually this is redundant\n    // there is no real change happening here\n    // we need to rethink if this needs to be refactored\n    this.update(this._snapshot, initEvent);\n    if (this.options.devTools) {\n      this.attachDevTools();\n    }\n    this.mailbox.start();\n    return this;\n  }\n  _process(event) {\n    let nextState;\n    let caughtError;\n    try {\n      nextState = this.logic.transition(this._snapshot, event, this._actorScope);\n    } catch (err) {\n      // we wrap it in a box so we can rethrow it later even if falsy value gets caught here\n      caughtError = {\n        err\n      };\n    }\n    if (caughtError) {\n      const {\n        err\n      } = caughtError;\n      this._snapshot = {\n        ...this._snapshot,\n        status: 'error',\n        error: err\n      };\n      this._error(err);\n      return;\n    }\n    this.update(nextState, event);\n    if (event.type === XSTATE_STOP) {\n      this._stopProcedure();\n      this._complete();\n    }\n  }\n  _stop() {\n    if (this._processingStatus === ProcessingStatus.Stopped) {\n      return this;\n    }\n    this.mailbox.clear();\n    if (this._processingStatus === ProcessingStatus.NotStarted) {\n      this._processingStatus = ProcessingStatus.Stopped;\n      return this;\n    }\n    this.mailbox.enqueue({\n      type: XSTATE_STOP\n    });\n    return this;\n  }\n\n  /** Stops the Actor and unsubscribe all listeners. */\n  stop() {\n    if (this._parent) {\n      throw new Error('A non-root actor cannot be stopped directly.');\n    }\n    return this._stop();\n  }\n  _complete() {\n    for (const observer of this.observers) {\n      try {\n        observer.complete?.();\n      } catch (err) {\n        reportUnhandledError(err);\n      }\n    }\n    this.observers.clear();\n  }\n  _reportError(err) {\n    if (!this.observers.size) {\n      if (!this._parent) {\n        reportUnhandledError(err);\n      }\n      return;\n    }\n    let reportError = false;\n    for (const observer of this.observers) {\n      const errorListener = observer.error;\n      reportError ||= !errorListener;\n      try {\n        errorListener?.(err);\n      } catch (err2) {\n        reportUnhandledError(err2);\n      }\n    }\n    this.observers.clear();\n    if (reportError) {\n      reportUnhandledError(err);\n    }\n  }\n  _error(err) {\n    this._stopProcedure();\n    this._reportError(err);\n    if (this._parent) {\n      this.system._relay(this, this._parent, createErrorActorEvent(this.id, err));\n    }\n  }\n  // TODO: atm children don't belong entirely to the actor so\n  // in a way - it's not even super aware of them\n  // so we can't stop them from here but we really should!\n  // right now, they are being stopped within the machine's transition\n  // but that could throw and leave us with \"orphaned\" active actors\n  _stopProcedure() {\n    if (this._processingStatus !== ProcessingStatus.Running) {\n      // Actor already stopped; do nothing\n      return this;\n    }\n\n    // Cancel all delayed events\n    this.system.scheduler.cancelAll(this);\n\n    // TODO: mailbox.reset\n    this.mailbox.clear();\n    // TODO: after `stop` we must prepare ourselves for receiving events again\n    // events sent *after* stop signal must be queued\n    // it seems like this should be the common behavior for all of our consumers\n    // so perhaps this should be unified somehow for all of them\n    this.mailbox = new Mailbox(this._process.bind(this));\n    this._processingStatus = ProcessingStatus.Stopped;\n    this.system._unregister(this);\n    return this;\n  }\n\n  /** @internal */\n  _send(event) {\n    if (this._processingStatus === ProcessingStatus.Stopped) {\n      return;\n    }\n    this.mailbox.enqueue(event);\n  }\n\n  /**\n   * Sends an event to the running Actor to trigger a transition.\n   *\n   * @param event The event to send\n   */\n  send(event) {\n    this.system._relay(undefined, this, event);\n  }\n  attachDevTools() {\n    const {\n      devTools\n    } = this.options;\n    if (devTools) {\n      const resolvedDevToolsAdapter = typeof devTools === 'function' ? devTools : devToolsAdapter;\n      resolvedDevToolsAdapter(this);\n    }\n  }\n  toJSON() {\n    return {\n      xstate$$type: $$ACTOR_TYPE,\n      id: this.id\n    };\n  }\n\n  /**\n   * Obtain the internal state of the actor, which can be persisted.\n   *\n   * @remarks\n   * The internal state can be persisted from any actor, not only machines.\n   *\n   * Note that the persisted state is not the same as the snapshot from\n   * {@link Actor.getSnapshot}. Persisted state represents the internal state of\n   * the actor, while snapshots represent the actor's last emitted value.\n   *\n   * Can be restored with {@link ActorOptions.state}\n   * @see https://stately.ai/docs/persistence\n   */\n\n  getPersistedSnapshot(options) {\n    return this.logic.getPersistedSnapshot(this._snapshot, options);\n  }\n  [symbolObservable]() {\n    return this;\n  }\n\n  /**\n   * Read an actor’s snapshot synchronously.\n   *\n   * @remarks\n   * The snapshot represent an actor's last emitted value.\n   *\n   * When an actor receives an event, its internal state may change. An actor\n   * may emit a snapshot when a state transition occurs.\n   *\n   * Note that some actors, such as callback actors generated with\n   * `fromCallback`, will not emit snapshots.\n   * @see {@link Actor.subscribe} to subscribe to an actor’s snapshot values.\n   * @see {@link Actor.getPersistedSnapshot} to persist the internal state of an actor (which is more than just a snapshot).\n   */\n  getSnapshot() {\n    return this._snapshot;\n  }\n}\n/**\n * Creates a new actor instance for the given actor logic with the provided\n * options, if any.\n *\n * @remarks\n * When you create an actor from actor logic via `createActor(logic)`, you\n * implicitly create an actor system where the created actor is the root actor.\n * Any actors spawned from this root actor and its descendants are part of that\n * actor system.\n * @example\n *\n * ```ts\n * import { createActor } from 'xstate';\n * import { someActorLogic } from './someActorLogic.ts';\n *\n * // Creating the actor, which implicitly creates an actor system with itself as the root actor\n * const actor = createActor(someActorLogic);\n *\n * actor.subscribe((snapshot) => {\n *   console.log(snapshot);\n * });\n *\n * // Actors must be started by calling `actor.start()`, which will also start the actor system.\n * actor.start();\n *\n * // Actors can receive events\n * actor.send({ type: 'someEvent' });\n *\n * // You can stop root actors by calling `actor.stop()`, which will also stop the actor system and all actors in that system.\n * actor.stop();\n * ```\n *\n * @param logic - The actor logic to create an actor from. For a state machine\n *   actor logic creator, see {@link createMachine}. Other actor logic creators\n *   include {@link fromCallback}, {@link fromEventObservable},\n *   {@link fromObservable}, {@link fromPromise}, and {@link fromTransition}.\n * @param options - Actor options\n */\nfunction createActor(logic) {\n  for (var _len = arguments.length, _ref = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    _ref[_key - 1] = arguments[_key];\n  }\n  let [options] = _ref;\n  return new Actor(logic, options);\n}\n\n/**\n * Creates a new Interpreter instance for the given machine with the provided\n * options, if any.\n *\n * @deprecated Use `createActor` instead\n * @alias\n */\nconst interpret = createActor;\n\n/**\n * @deprecated Use `Actor` instead.\n * @alias\n */\n\nfunction resolveCancel(_, snapshot, actionArgs, actionParams, _ref2) {\n  let {\n    sendId\n  } = _ref2;\n  const resolvedSendId = typeof sendId === 'function' ? sendId(actionArgs, actionParams) : sendId;\n  return [snapshot, resolvedSendId];\n}\nfunction executeCancel(actorScope, resolvedSendId) {\n  actorScope.defer(() => {\n    actorScope.system.scheduler.cancel(actorScope.self, resolvedSendId);\n  });\n}\n/**\n * Cancels a delayed `sendTo(...)` action that is waiting to be executed. The\n * canceled `sendTo(...)` action will not send its event or execute, unless the\n * `delay` has already elapsed before `cancel(...)` is called.\n *\n * @example\n *\n * ```ts\n * import { createMachine, sendTo, cancel } from 'xstate';\n *\n * const machine = createMachine({\n *   // ...\n *   on: {\n *     sendEvent: {\n *       actions: sendTo(\n *         'some-actor',\n *         { type: 'someEvent' },\n *         {\n *           id: 'some-id',\n *           delay: 1000\n *         }\n *       )\n *     },\n *     cancelEvent: {\n *       actions: cancel('some-id')\n *     }\n *   }\n * });\n * ```\n *\n * @param sendId The `id` of the `sendTo(...)` action to cancel.\n */\nfunction cancel(sendId) {\n  function cancel(args, params) {}\n  cancel.type = 'xstate.cancel';\n  cancel.sendId = sendId;\n  cancel.resolve = resolveCancel;\n  cancel.execute = executeCancel;\n  return cancel;\n}\nfunction resolveSpawn(actorScope, snapshot, actionArgs, _actionParams, _ref3) {\n  let {\n    id,\n    systemId,\n    src,\n    input,\n    syncSnapshot\n  } = _ref3;\n  const logic = typeof src === 'string' ? resolveReferencedActor(snapshot.machine, src) : src;\n  const resolvedId = typeof id === 'function' ? id(actionArgs) : id;\n  let actorRef;\n  if (logic) {\n    actorRef = createActor(logic, {\n      id: resolvedId,\n      src,\n      parent: actorScope.self,\n      syncSnapshot,\n      systemId,\n      input: typeof input === 'function' ? input({\n        context: snapshot.context,\n        event: actionArgs.event,\n        self: actorScope.self\n      }) : input\n    });\n  }\n  return [cloneMachineSnapshot(snapshot, {\n    children: {\n      ...snapshot.children,\n      [resolvedId]: actorRef\n    }\n  }), {\n    id,\n    actorRef\n  }];\n}\nfunction executeSpawn(actorScope, _ref4) {\n  let {\n    id,\n    actorRef\n  } = _ref4;\n  if (!actorRef) {\n    return;\n  }\n  actorScope.defer(() => {\n    if (actorRef._processingStatus === ProcessingStatus.Stopped) {\n      return;\n    }\n    actorRef.start();\n  });\n}\nfunction spawnChild() {\n  for (var _len2 = arguments.length, _ref5 = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    _ref5[_key2] = arguments[_key2];\n  }\n  let [src, {\n    id,\n    systemId,\n    input,\n    syncSnapshot = false\n  } = {}] = _ref5;\n  function spawnChild(args, params) {}\n  spawnChild.type = 'snapshot.spawnChild';\n  spawnChild.id = id;\n  spawnChild.systemId = systemId;\n  spawnChild.src = src;\n  spawnChild.input = input;\n  spawnChild.syncSnapshot = syncSnapshot;\n  spawnChild.resolve = resolveSpawn;\n  spawnChild.execute = executeSpawn;\n  return spawnChild;\n}\nfunction resolveStop(_, snapshot, args, actionParams, _ref6) {\n  let {\n    actorRef\n  } = _ref6;\n  const actorRefOrString = typeof actorRef === 'function' ? actorRef(args, actionParams) : actorRef;\n  const resolvedActorRef = typeof actorRefOrString === 'string' ? snapshot.children[actorRefOrString] : actorRefOrString;\n  let children = snapshot.children;\n  if (resolvedActorRef) {\n    children = {\n      ...children\n    };\n    delete children[resolvedActorRef.id];\n  }\n  return [cloneMachineSnapshot(snapshot, {\n    children\n  }), resolvedActorRef];\n}\nfunction executeStop(actorScope, actorRef) {\n  if (!actorRef) {\n    return;\n  }\n\n  // we need to eagerly unregister it here so a new actor with the same systemId can be registered immediately\n  // since we defer actual stopping of the actor but we don't defer actor creations (and we can't do that)\n  // this could throw on `systemId` collision, for example, when dealing with reentering transitions\n  actorScope.system._unregister(actorRef);\n\n  // this allows us to prevent an actor from being started if it gets stopped within the same macrostep\n  // this can happen, for example, when the invoking state is being exited immediately by an always transition\n  if (actorRef._processingStatus !== ProcessingStatus.Running) {\n    actorScope.stopChild(actorRef);\n    return;\n  }\n  // stopping a child enqueues a stop event in the child actor's mailbox\n  // we need for all of the already enqueued events to be processed before we stop the child\n  // the parent itself might want to send some events to a child (for example from exit actions on the invoking state)\n  // and we don't want to ignore those events\n  actorScope.defer(() => {\n    actorScope.stopChild(actorRef);\n  });\n}\n/**\n * Stops a child actor.\n *\n * @param actorRef The actor to stop.\n */\nfunction stopChild(actorRef) {\n  function stop(args, params) {}\n  stop.type = 'xstate.stopChild';\n  stop.actorRef = actorRef;\n  stop.resolve = resolveStop;\n  stop.execute = executeStop;\n  return stop;\n}\n\n/**\n * Stops a child actor.\n *\n * @deprecated Use `stopChild(...)` instead\n * @alias\n */\nconst stop = stopChild;\nfunction checkStateIn(snapshot, _, _ref7) {\n  let {\n    stateValue\n  } = _ref7;\n  if (typeof stateValue === 'string' && isStateId(stateValue)) {\n    const target = snapshot.machine.getStateNodeById(stateValue);\n    return snapshot._nodes.some(sn => sn === target);\n  }\n  return snapshot.matches(stateValue);\n}\nfunction stateIn(stateValue) {\n  function stateIn(args, params) {\n    return false;\n  }\n  stateIn.check = checkStateIn;\n  stateIn.stateValue = stateValue;\n  return stateIn;\n}\nfunction checkNot(snapshot, _ref8, _ref9) {\n  let {\n    context,\n    event\n  } = _ref8;\n  let {\n    guards\n  } = _ref9;\n  return !evaluateGuard(guards[0], context, event, snapshot);\n}\n\n/**\n * Higher-order guard that evaluates to `true` if the `guard` passed to it\n * evaluates to `false`.\n *\n * @category Guards\n * @example\n *\n * ```ts\n * import { setup, not } from 'xstate';\n *\n * const machine = setup({\n *   guards: {\n *     someNamedGuard: () => false\n *   }\n * }).createMachine({\n *   on: {\n *     someEvent: {\n *       guard: not('someNamedGuard'),\n *       actions: () => {\n *         // will be executed if guard in `not(...)`\n *         // evaluates to `false`\n *       }\n *     }\n *   }\n * });\n * ```\n *\n * @returns A guard\n */\nfunction not(guard) {\n  function not(args, params) {\n    return false;\n  }\n  not.check = checkNot;\n  not.guards = [guard];\n  return not;\n}\nfunction checkAnd(snapshot, _ref10, _ref11) {\n  let {\n    context,\n    event\n  } = _ref10;\n  let {\n    guards\n  } = _ref11;\n  return guards.every(guard => evaluateGuard(guard, context, event, snapshot));\n}\n\n/**\n * Higher-order guard that evaluates to `true` if all `guards` passed to it\n * evaluate to `true`.\n *\n * @category Guards\n * @example\n *\n * ```ts\n * import { setup, and } from 'xstate';\n *\n * const machine = setup({\n *   guards: {\n *     someNamedGuard: () => true\n *   }\n * }).createMachine({\n *   on: {\n *     someEvent: {\n *       guard: and([({ context }) => context.value > 0, 'someNamedGuard']),\n *       actions: () => {\n *         // will be executed if all guards in `and(...)`\n *         // evaluate to true\n *       }\n *     }\n *   }\n * });\n * ```\n *\n * @returns A guard action object\n */\nfunction and(guards) {\n  function and(args, params) {\n    return false;\n  }\n  and.check = checkAnd;\n  and.guards = guards;\n  return and;\n}\nfunction checkOr(snapshot, _ref12, _ref13) {\n  let {\n    context,\n    event\n  } = _ref12;\n  let {\n    guards\n  } = _ref13;\n  return guards.some(guard => evaluateGuard(guard, context, event, snapshot));\n}\n\n/**\n * Higher-order guard that evaluates to `true` if any of the `guards` passed to\n * it evaluate to `true`.\n *\n * @category Guards\n * @example\n *\n * ```ts\n * import { setup, or } from 'xstate';\n *\n * const machine = setup({\n *   guards: {\n *     someNamedGuard: () => true\n *   }\n * }).createMachine({\n *   on: {\n *     someEvent: {\n *       guard: or([({ context }) => context.value > 0, 'someNamedGuard']),\n *       actions: () => {\n *         // will be executed if any of the guards in `or(...)`\n *         // evaluate to true\n *       }\n *     }\n *   }\n * });\n * ```\n *\n * @returns A guard action object\n */\nfunction or(guards) {\n  function or(args, params) {\n    return false;\n  }\n  or.check = checkOr;\n  or.guards = guards;\n  return or;\n}\n\n// TODO: throw on cycles (depth check should be enough)\nfunction evaluateGuard(guard, context, event, snapshot) {\n  const {\n    machine\n  } = snapshot;\n  const isInline = typeof guard === 'function';\n  const resolved = isInline ? guard : machine.implementations.guards[typeof guard === 'string' ? guard : guard.type];\n  if (!isInline && !resolved) {\n    throw new Error(`Guard '${typeof guard === 'string' ? guard : guard.type}' is not implemented.'.`);\n  }\n  if (typeof resolved !== 'function') {\n    return evaluateGuard(resolved, context, event, snapshot);\n  }\n  const guardArgs = {\n    context,\n    event\n  };\n  const guardParams = isInline || typeof guard === 'string' ? undefined : 'params' in guard ? typeof guard.params === 'function' ? guard.params({\n    context,\n    event\n  }) : guard.params : undefined;\n  if (!('check' in resolved)) {\n    // the existing type of `.guards` assumes non-nullable `TExpressionGuard`\n    // inline guards expect `TExpressionGuard` to be set to `undefined`\n    // it's fine to cast this here, our logic makes sure that we call those 2 \"variants\" correctly\n    return resolved(guardArgs, guardParams);\n  }\n  const builtinGuard = resolved;\n  return builtinGuard.check(snapshot, guardArgs, resolved // this holds all params\n  );\n}\nconst isAtomicStateNode = stateNode => stateNode.type === 'atomic' || stateNode.type === 'final';\nfunction getChildren(stateNode) {\n  return Object.values(stateNode.states).filter(sn => sn.type !== 'history');\n}\nfunction getProperAncestors(stateNode, toStateNode) {\n  const ancestors = [];\n  if (toStateNode === stateNode) {\n    return ancestors;\n  }\n\n  // add all ancestors\n  let m = stateNode.parent;\n  while (m && m !== toStateNode) {\n    ancestors.push(m);\n    m = m.parent;\n  }\n  return ancestors;\n}\nfunction getAllStateNodes(stateNodes) {\n  const nodeSet = new Set(stateNodes);\n  const adjList = getAdjList(nodeSet);\n\n  // add descendants\n  for (const s of nodeSet) {\n    // if previously active, add existing child nodes\n    if (s.type === 'compound' && (!adjList.get(s) || !adjList.get(s).length)) {\n      getInitialStateNodesWithTheirAncestors(s).forEach(sn => nodeSet.add(sn));\n    } else {\n      if (s.type === 'parallel') {\n        for (const child of getChildren(s)) {\n          if (child.type === 'history') {\n            continue;\n          }\n          if (!nodeSet.has(child)) {\n            const initialStates = getInitialStateNodesWithTheirAncestors(child);\n            for (const initialStateNode of initialStates) {\n              nodeSet.add(initialStateNode);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  // add all ancestors\n  for (const s of nodeSet) {\n    let m = s.parent;\n    while (m) {\n      nodeSet.add(m);\n      m = m.parent;\n    }\n  }\n  return nodeSet;\n}\nfunction getValueFromAdj(baseNode, adjList) {\n  const childStateNodes = adjList.get(baseNode);\n  if (!childStateNodes) {\n    return {}; // todo: fix?\n  }\n  if (baseNode.type === 'compound') {\n    const childStateNode = childStateNodes[0];\n    if (childStateNode) {\n      if (isAtomicStateNode(childStateNode)) {\n        return childStateNode.key;\n      }\n    } else {\n      return {};\n    }\n  }\n  const stateValue = {};\n  for (const childStateNode of childStateNodes) {\n    stateValue[childStateNode.key] = getValueFromAdj(childStateNode, adjList);\n  }\n  return stateValue;\n}\nfunction getAdjList(stateNodes) {\n  const adjList = new Map();\n  for (const s of stateNodes) {\n    if (!adjList.has(s)) {\n      adjList.set(s, []);\n    }\n    if (s.parent) {\n      if (!adjList.has(s.parent)) {\n        adjList.set(s.parent, []);\n      }\n      adjList.get(s.parent).push(s);\n    }\n  }\n  return adjList;\n}\nfunction getStateValue(rootNode, stateNodes) {\n  const config = getAllStateNodes(stateNodes);\n  return getValueFromAdj(rootNode, getAdjList(config));\n}\nfunction isInFinalState(stateNodeSet, stateNode) {\n  if (stateNode.type === 'compound') {\n    return getChildren(stateNode).some(s => s.type === 'final' && stateNodeSet.has(s));\n  }\n  if (stateNode.type === 'parallel') {\n    return getChildren(stateNode).every(sn => isInFinalState(stateNodeSet, sn));\n  }\n  return stateNode.type === 'final';\n}\nconst isStateId = str => str[0] === STATE_IDENTIFIER;\nfunction getCandidates(stateNode, receivedEventType) {\n  const candidates = stateNode.transitions.get(receivedEventType) || [...stateNode.transitions.keys()].filter(eventDescriptor => {\n    // check if transition is a wildcard transition,\n    // which matches any non-transient events\n    if (eventDescriptor === WILDCARD) {\n      return true;\n    }\n    if (!eventDescriptor.endsWith('.*')) {\n      return false;\n    }\n    const partialEventTokens = eventDescriptor.split('.');\n    const eventTokens = receivedEventType.split('.');\n    for (let tokenIndex = 0; tokenIndex < partialEventTokens.length; tokenIndex++) {\n      const partialEventToken = partialEventTokens[tokenIndex];\n      const eventToken = eventTokens[tokenIndex];\n      if (partialEventToken === '*') {\n        const isLastToken = tokenIndex === partialEventTokens.length - 1;\n        return isLastToken;\n      }\n      if (partialEventToken !== eventToken) {\n        return false;\n      }\n    }\n    return true;\n  }).sort((a, b) => b.length - a.length).flatMap(key => stateNode.transitions.get(key));\n  return candidates;\n}\n\n/** All delayed transitions from the config. */\nfunction getDelayedTransitions(stateNode) {\n  const afterConfig = stateNode.config.after;\n  if (!afterConfig) {\n    return [];\n  }\n  const mutateEntryExit = (delay, i) => {\n    const afterEvent = createAfterEvent(delay, stateNode.id);\n    const eventType = afterEvent.type;\n    stateNode.entry.push(raise(afterEvent, {\n      id: eventType,\n      delay\n    }));\n    stateNode.exit.push(cancel(eventType));\n    return eventType;\n  };\n  const delayedTransitions = Object.keys(afterConfig).flatMap((delay, i) => {\n    const configTransition = afterConfig[delay];\n    const resolvedTransition = typeof configTransition === 'string' ? {\n      target: configTransition\n    } : configTransition;\n    const resolvedDelay = Number.isNaN(+delay) ? delay : +delay;\n    const eventType = mutateEntryExit(resolvedDelay);\n    return toArray(resolvedTransition).map(transition => ({\n      ...transition,\n      event: eventType,\n      delay: resolvedDelay\n    }));\n  });\n  return delayedTransitions.map(delayedTransition => {\n    const {\n      delay\n    } = delayedTransition;\n    return {\n      ...formatTransition(stateNode, delayedTransition.event, delayedTransition),\n      delay\n    };\n  });\n}\nfunction formatTransition(stateNode, descriptor, transitionConfig) {\n  const normalizedTarget = normalizeTarget(transitionConfig.target);\n  const reenter = transitionConfig.reenter ?? false;\n  const target = resolveTarget(stateNode, normalizedTarget);\n  const transition = {\n    ...transitionConfig,\n    actions: toArray(transitionConfig.actions),\n    guard: transitionConfig.guard,\n    target,\n    source: stateNode,\n    reenter,\n    eventType: descriptor,\n    toJSON: () => ({\n      ...transition,\n      source: `#${stateNode.id}`,\n      target: target ? target.map(t => `#${t.id}`) : undefined\n    })\n  };\n  return transition;\n}\nfunction formatTransitions(stateNode) {\n  const transitions = new Map();\n  if (stateNode.config.on) {\n    for (const descriptor of Object.keys(stateNode.config.on)) {\n      if (descriptor === NULL_EVENT) {\n        throw new Error('Null events (\"\") cannot be specified as a transition key. Use `always: { ... }` instead.');\n      }\n      const transitionsConfig = stateNode.config.on[descriptor];\n      transitions.set(descriptor, toTransitionConfigArray(transitionsConfig).map(t => formatTransition(stateNode, descriptor, t)));\n    }\n  }\n  if (stateNode.config.onDone) {\n    const descriptor = `xstate.done.state.${stateNode.id}`;\n    transitions.set(descriptor, toTransitionConfigArray(stateNode.config.onDone).map(t => formatTransition(stateNode, descriptor, t)));\n  }\n  for (const invokeDef of stateNode.invoke) {\n    if (invokeDef.onDone) {\n      const descriptor = `xstate.done.actor.${invokeDef.id}`;\n      transitions.set(descriptor, toTransitionConfigArray(invokeDef.onDone).map(t => formatTransition(stateNode, descriptor, t)));\n    }\n    if (invokeDef.onError) {\n      const descriptor = `xstate.error.actor.${invokeDef.id}`;\n      transitions.set(descriptor, toTransitionConfigArray(invokeDef.onError).map(t => formatTransition(stateNode, descriptor, t)));\n    }\n    if (invokeDef.onSnapshot) {\n      const descriptor = `xstate.snapshot.${invokeDef.id}`;\n      transitions.set(descriptor, toTransitionConfigArray(invokeDef.onSnapshot).map(t => formatTransition(stateNode, descriptor, t)));\n    }\n  }\n  for (const delayedTransition of stateNode.after) {\n    let existing = transitions.get(delayedTransition.eventType);\n    if (!existing) {\n      existing = [];\n      transitions.set(delayedTransition.eventType, existing);\n    }\n    existing.push(delayedTransition);\n  }\n  return transitions;\n}\nfunction formatInitialTransition(stateNode, _target) {\n  const resolvedTarget = typeof _target === 'string' ? stateNode.states[_target] : _target ? stateNode.states[_target.target] : undefined;\n  if (!resolvedTarget && _target) {\n    throw new Error(`Initial state node \"${_target}\" not found on parent state node #${stateNode.id}`);\n  }\n  const transition = {\n    source: stateNode,\n    actions: !_target || typeof _target === 'string' ? [] : toArray(_target.actions),\n    eventType: null,\n    reenter: false,\n    target: resolvedTarget ? [resolvedTarget] : [],\n    toJSON: () => ({\n      ...transition,\n      source: `#${stateNode.id}`,\n      target: resolvedTarget ? [`#${resolvedTarget.id}`] : []\n    })\n  };\n  return transition;\n}\nfunction resolveTarget(stateNode, targets) {\n  if (targets === undefined) {\n    // an undefined target signals that the state node should not transition from that state when receiving that event\n    return undefined;\n  }\n  return targets.map(target => {\n    if (typeof target !== 'string') {\n      return target;\n    }\n    if (isStateId(target)) {\n      return stateNode.machine.getStateNodeById(target);\n    }\n    const isInternalTarget = target[0] === STATE_DELIMITER;\n    // If internal target is defined on machine,\n    // do not include machine key on target\n    if (isInternalTarget && !stateNode.parent) {\n      return getStateNodeByPath(stateNode, target.slice(1));\n    }\n    const resolvedTarget = isInternalTarget ? stateNode.key + target : target;\n    if (stateNode.parent) {\n      try {\n        const targetStateNode = getStateNodeByPath(stateNode.parent, resolvedTarget);\n        return targetStateNode;\n      } catch (err) {\n        throw new Error(`Invalid transition definition for state node '${stateNode.id}':\\n${err.message}`);\n      }\n    } else {\n      throw new Error(`Invalid target: \"${target}\" is not a valid target from the root node. Did you mean \".${target}\"?`);\n    }\n  });\n}\nfunction resolveHistoryDefaultTransition(stateNode) {\n  const normalizedTarget = normalizeTarget(stateNode.config.target);\n  if (!normalizedTarget) {\n    return stateNode.parent.initial;\n  }\n  return {\n    target: normalizedTarget.map(t => typeof t === 'string' ? getStateNodeByPath(stateNode.parent, t) : t)\n  };\n}\nfunction isHistoryNode(stateNode) {\n  return stateNode.type === 'history';\n}\nfunction getInitialStateNodesWithTheirAncestors(stateNode) {\n  const states = getInitialStateNodes(stateNode);\n  for (const initialState of states) {\n    for (const ancestor of getProperAncestors(initialState, stateNode)) {\n      states.add(ancestor);\n    }\n  }\n  return states;\n}\nfunction getInitialStateNodes(stateNode) {\n  const set = new Set();\n  function iter(descStateNode) {\n    if (set.has(descStateNode)) {\n      return;\n    }\n    set.add(descStateNode);\n    if (descStateNode.type === 'compound') {\n      iter(descStateNode.initial.target[0]);\n    } else if (descStateNode.type === 'parallel') {\n      for (const child of getChildren(descStateNode)) {\n        iter(child);\n      }\n    }\n  }\n  iter(stateNode);\n  return set;\n}\n/** Returns the child state node from its relative `stateKey`, or throws. */\nfunction getStateNode(stateNode, stateKey) {\n  if (isStateId(stateKey)) {\n    return stateNode.machine.getStateNodeById(stateKey);\n  }\n  if (!stateNode.states) {\n    throw new Error(`Unable to retrieve child state '${stateKey}' from '${stateNode.id}'; no child states exist.`);\n  }\n  const result = stateNode.states[stateKey];\n  if (!result) {\n    throw new Error(`Child state '${stateKey}' does not exist on '${stateNode.id}'`);\n  }\n  return result;\n}\n\n/**\n * Returns the relative state node from the given `statePath`, or throws.\n *\n * @param statePath The string or string array relative path to the state node.\n */\nfunction getStateNodeByPath(stateNode, statePath) {\n  if (typeof statePath === 'string' && isStateId(statePath)) {\n    try {\n      return stateNode.machine.getStateNodeById(statePath);\n    } catch (e) {\n      // try individual paths\n      // throw e;\n    }\n  }\n  const arrayStatePath = toStatePath(statePath).slice();\n  let currentStateNode = stateNode;\n  while (arrayStatePath.length) {\n    const key = arrayStatePath.shift();\n    if (!key.length) {\n      break;\n    }\n    currentStateNode = getStateNode(currentStateNode, key);\n  }\n  return currentStateNode;\n}\n\n/**\n * Returns the state nodes represented by the current state value.\n *\n * @param stateValue The state value or State instance\n */\nfunction getStateNodes(stateNode, stateValue) {\n  if (typeof stateValue === 'string') {\n    const childStateNode = stateNode.states[stateValue];\n    if (!childStateNode) {\n      throw new Error(`State '${stateValue}' does not exist on '${stateNode.id}'`);\n    }\n    return [stateNode, childStateNode];\n  }\n  const childStateKeys = Object.keys(stateValue);\n  const childStateNodes = childStateKeys.map(subStateKey => getStateNode(stateNode, subStateKey)).filter(Boolean);\n  return [stateNode.machine.root, stateNode].concat(childStateNodes, childStateKeys.reduce((allSubStateNodes, subStateKey) => {\n    const subStateNode = getStateNode(stateNode, subStateKey);\n    if (!subStateNode) {\n      return allSubStateNodes;\n    }\n    const subStateNodes = getStateNodes(subStateNode, stateValue[subStateKey]);\n    return allSubStateNodes.concat(subStateNodes);\n  }, []));\n}\nfunction transitionAtomicNode(stateNode, stateValue, snapshot, event) {\n  const childStateNode = getStateNode(stateNode, stateValue);\n  const next = childStateNode.next(snapshot, event);\n  if (!next || !next.length) {\n    return stateNode.next(snapshot, event);\n  }\n  return next;\n}\nfunction transitionCompoundNode(stateNode, stateValue, snapshot, event) {\n  const subStateKeys = Object.keys(stateValue);\n  const childStateNode = getStateNode(stateNode, subStateKeys[0]);\n  const next = transitionNode(childStateNode, stateValue[subStateKeys[0]], snapshot, event);\n  if (!next || !next.length) {\n    return stateNode.next(snapshot, event);\n  }\n  return next;\n}\nfunction transitionParallelNode(stateNode, stateValue, snapshot, event) {\n  const allInnerTransitions = [];\n  for (const subStateKey of Object.keys(stateValue)) {\n    const subStateValue = stateValue[subStateKey];\n    if (!subStateValue) {\n      continue;\n    }\n    const subStateNode = getStateNode(stateNode, subStateKey);\n    const innerTransitions = transitionNode(subStateNode, subStateValue, snapshot, event);\n    if (innerTransitions) {\n      allInnerTransitions.push(...innerTransitions);\n    }\n  }\n  if (!allInnerTransitions.length) {\n    return stateNode.next(snapshot, event);\n  }\n  return allInnerTransitions;\n}\nfunction transitionNode(stateNode, stateValue, snapshot, event) {\n  // leaf node\n  if (typeof stateValue === 'string') {\n    return transitionAtomicNode(stateNode, stateValue, snapshot, event);\n  }\n\n  // compound node\n  if (Object.keys(stateValue).length === 1) {\n    return transitionCompoundNode(stateNode, stateValue, snapshot, event);\n  }\n\n  // parallel node\n  return transitionParallelNode(stateNode, stateValue, snapshot, event);\n}\nfunction getHistoryNodes(stateNode) {\n  return Object.keys(stateNode.states).map(key => stateNode.states[key]).filter(sn => sn.type === 'history');\n}\nfunction isDescendant(childStateNode, parentStateNode) {\n  let marker = childStateNode;\n  while (marker.parent && marker.parent !== parentStateNode) {\n    marker = marker.parent;\n  }\n  return marker.parent === parentStateNode;\n}\nfunction hasIntersection(s1, s2) {\n  const set1 = new Set(s1);\n  const set2 = new Set(s2);\n  for (const item of set1) {\n    if (set2.has(item)) {\n      return true;\n    }\n  }\n  for (const item of set2) {\n    if (set1.has(item)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction removeConflictingTransitions(enabledTransitions, stateNodeSet, historyValue) {\n  const filteredTransitions = new Set();\n  for (const t1 of enabledTransitions) {\n    let t1Preempted = false;\n    const transitionsToRemove = new Set();\n    for (const t2 of filteredTransitions) {\n      if (hasIntersection(computeExitSet([t1], stateNodeSet, historyValue), computeExitSet([t2], stateNodeSet, historyValue))) {\n        if (isDescendant(t1.source, t2.source)) {\n          transitionsToRemove.add(t2);\n        } else {\n          t1Preempted = true;\n          break;\n        }\n      }\n    }\n    if (!t1Preempted) {\n      for (const t3 of transitionsToRemove) {\n        filteredTransitions.delete(t3);\n      }\n      filteredTransitions.add(t1);\n    }\n  }\n  return Array.from(filteredTransitions);\n}\nfunction findLeastCommonAncestor(stateNodes) {\n  const [head, ...tail] = stateNodes;\n  for (const ancestor of getProperAncestors(head, undefined)) {\n    if (tail.every(sn => isDescendant(sn, ancestor))) {\n      return ancestor;\n    }\n  }\n}\nfunction getEffectiveTargetStates(transition, historyValue) {\n  if (!transition.target) {\n    return [];\n  }\n  const targets = new Set();\n  for (const targetNode of transition.target) {\n    if (isHistoryNode(targetNode)) {\n      if (historyValue[targetNode.id]) {\n        for (const node of historyValue[targetNode.id]) {\n          targets.add(node);\n        }\n      } else {\n        for (const node of getEffectiveTargetStates(resolveHistoryDefaultTransition(targetNode), historyValue)) {\n          targets.add(node);\n        }\n      }\n    } else {\n      targets.add(targetNode);\n    }\n  }\n  return [...targets];\n}\nfunction getTransitionDomain(transition, historyValue) {\n  const targetStates = getEffectiveTargetStates(transition, historyValue);\n  if (!targetStates) {\n    return;\n  }\n  if (!transition.reenter && targetStates.every(target => target === transition.source || isDescendant(target, transition.source))) {\n    return transition.source;\n  }\n  const lca = findLeastCommonAncestor(targetStates.concat(transition.source));\n  if (lca) {\n    return lca;\n  }\n\n  // at this point we know that it's a root transition since LCA couldn't be found\n  if (transition.reenter) {\n    return;\n  }\n  return transition.source.machine.root;\n}\nfunction computeExitSet(transitions, stateNodeSet, historyValue) {\n  const statesToExit = new Set();\n  for (const t of transitions) {\n    if (t.target?.length) {\n      const domain = getTransitionDomain(t, historyValue);\n      if (t.reenter && t.source === domain) {\n        statesToExit.add(domain);\n      }\n      for (const stateNode of stateNodeSet) {\n        if (isDescendant(stateNode, domain)) {\n          statesToExit.add(stateNode);\n        }\n      }\n    }\n  }\n  return [...statesToExit];\n}\nfunction areStateNodeCollectionsEqual(prevStateNodes, nextStateNodeSet) {\n  if (prevStateNodes.length !== nextStateNodeSet.size) {\n    return false;\n  }\n  for (const node of prevStateNodes) {\n    if (!nextStateNodeSet.has(node)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/** https://www.w3.org/TR/scxml/#microstepProcedure */\nfunction microstep(transitions, currentSnapshot, actorScope, event, isInitial, internalQueue) {\n  if (!transitions.length) {\n    return currentSnapshot;\n  }\n  const mutStateNodeSet = new Set(currentSnapshot._nodes);\n  let historyValue = currentSnapshot.historyValue;\n  const filteredTransitions = removeConflictingTransitions(transitions, mutStateNodeSet, historyValue);\n  let nextState = currentSnapshot;\n\n  // Exit states\n  if (!isInitial) {\n    [nextState, historyValue] = exitStates(nextState, event, actorScope, filteredTransitions, mutStateNodeSet, historyValue, internalQueue);\n  }\n\n  // Execute transition content\n  nextState = resolveActionsAndContext(nextState, event, actorScope, filteredTransitions.flatMap(t => t.actions), internalQueue);\n\n  // Enter states\n  nextState = enterStates(nextState, event, actorScope, filteredTransitions, mutStateNodeSet, internalQueue, historyValue, isInitial);\n  const nextStateNodes = [...mutStateNodeSet];\n  if (nextState.status === 'done') {\n    nextState = resolveActionsAndContext(nextState, event, actorScope, nextStateNodes.sort((a, b) => b.order - a.order).flatMap(state => state.exit), internalQueue);\n  }\n  try {\n    if (historyValue === currentSnapshot.historyValue && areStateNodeCollectionsEqual(currentSnapshot._nodes, mutStateNodeSet)) {\n      return nextState;\n    }\n    return cloneMachineSnapshot(nextState, {\n      _nodes: nextStateNodes,\n      historyValue\n    });\n  } catch (e) {\n    // TODO: Refactor this once proper error handling is implemented.\n    // See https://github.com/statelyai/rfcs/pull/4\n    throw e;\n  }\n}\nfunction getMachineOutput(snapshot, event, actorScope, rootNode, rootCompletionNode) {\n  if (rootNode.output === undefined) {\n    return;\n  }\n  const doneStateEvent = createDoneStateEvent(rootCompletionNode.id, rootCompletionNode.output !== undefined && rootCompletionNode.parent ? resolveOutput(rootCompletionNode.output, snapshot.context, event, actorScope.self) : undefined);\n  return resolveOutput(rootNode.output, snapshot.context, doneStateEvent, actorScope.self);\n}\nfunction enterStates(currentSnapshot, event, actorScope, filteredTransitions, mutStateNodeSet, internalQueue, historyValue, isInitial) {\n  let nextSnapshot = currentSnapshot;\n  const statesToEnter = new Set();\n  // those are states that were directly targeted or indirectly targeted by the explicit target\n  // in other words, those are states for which initial actions should be executed\n  // when we target `#deep_child` initial actions of its ancestors shouldn't be executed\n  const statesForDefaultEntry = new Set();\n  computeEntrySet(filteredTransitions, historyValue, statesForDefaultEntry, statesToEnter);\n\n  // In the initial state, the root state node is \"entered\".\n  if (isInitial) {\n    statesForDefaultEntry.add(currentSnapshot.machine.root);\n  }\n  const completedNodes = new Set();\n  for (const stateNodeToEnter of [...statesToEnter].sort((a, b) => a.order - b.order)) {\n    mutStateNodeSet.add(stateNodeToEnter);\n    const actions = [];\n\n    // Add entry actions\n    actions.push(...stateNodeToEnter.entry);\n    for (const invokeDef of stateNodeToEnter.invoke) {\n      actions.push(spawnChild(invokeDef.src, {\n        ...invokeDef,\n        syncSnapshot: !!invokeDef.onSnapshot\n      }));\n    }\n    if (statesForDefaultEntry.has(stateNodeToEnter)) {\n      const initialActions = stateNodeToEnter.initial.actions;\n      actions.push(...initialActions);\n    }\n    nextSnapshot = resolveActionsAndContext(nextSnapshot, event, actorScope, actions, internalQueue, stateNodeToEnter.invoke.map(invokeDef => invokeDef.id));\n    if (stateNodeToEnter.type === 'final') {\n      const parent = stateNodeToEnter.parent;\n      let ancestorMarker = parent?.type === 'parallel' ? parent : parent?.parent;\n      let rootCompletionNode = ancestorMarker || stateNodeToEnter;\n      if (parent?.type === 'compound') {\n        internalQueue.push(createDoneStateEvent(parent.id, stateNodeToEnter.output !== undefined ? resolveOutput(stateNodeToEnter.output, nextSnapshot.context, event, actorScope.self) : undefined));\n      }\n      while (ancestorMarker?.type === 'parallel' && !completedNodes.has(ancestorMarker) && isInFinalState(mutStateNodeSet, ancestorMarker)) {\n        completedNodes.add(ancestorMarker);\n        internalQueue.push(createDoneStateEvent(ancestorMarker.id));\n        rootCompletionNode = ancestorMarker;\n        ancestorMarker = ancestorMarker.parent;\n      }\n      if (ancestorMarker) {\n        continue;\n      }\n      nextSnapshot = cloneMachineSnapshot(nextSnapshot, {\n        status: 'done',\n        output: getMachineOutput(nextSnapshot, event, actorScope, nextSnapshot.machine.root, rootCompletionNode)\n      });\n    }\n  }\n  return nextSnapshot;\n}\nfunction computeEntrySet(transitions, historyValue, statesForDefaultEntry, statesToEnter) {\n  for (const t of transitions) {\n    const domain = getTransitionDomain(t, historyValue);\n    for (const s of t.target || []) {\n      if (!isHistoryNode(s) && (\n      // if the target is different than the source then it will *definitely* be entered\n      t.source !== s ||\n      // we know that the domain can't lie within the source\n      // if it's different than the source then it's outside of it and it means that the target has to be entered as well\n      t.source !== domain ||\n      // reentering transitions always enter the target, even if it's the source itself\n      t.reenter)) {\n        statesToEnter.add(s);\n        statesForDefaultEntry.add(s);\n      }\n      addDescendantStatesToEnter(s, historyValue, statesForDefaultEntry, statesToEnter);\n    }\n    const targetStates = getEffectiveTargetStates(t, historyValue);\n    for (const s of targetStates) {\n      const ancestors = getProperAncestors(s, domain);\n      if (domain?.type === 'parallel') {\n        ancestors.push(domain);\n      }\n      addAncestorStatesToEnter(statesToEnter, historyValue, statesForDefaultEntry, ancestors, !t.source.parent && t.reenter ? undefined : domain);\n    }\n  }\n}\nfunction addDescendantStatesToEnter(stateNode, historyValue, statesForDefaultEntry, statesToEnter) {\n  if (isHistoryNode(stateNode)) {\n    if (historyValue[stateNode.id]) {\n      const historyStateNodes = historyValue[stateNode.id];\n      for (const s of historyStateNodes) {\n        statesToEnter.add(s);\n        addDescendantStatesToEnter(s, historyValue, statesForDefaultEntry, statesToEnter);\n      }\n      for (const s of historyStateNodes) {\n        addProperAncestorStatesToEnter(s, stateNode.parent, statesToEnter, historyValue, statesForDefaultEntry);\n      }\n    } else {\n      const historyDefaultTransition = resolveHistoryDefaultTransition(stateNode);\n      for (const s of historyDefaultTransition.target) {\n        statesToEnter.add(s);\n        if (historyDefaultTransition === stateNode.parent?.initial) {\n          statesForDefaultEntry.add(stateNode.parent);\n        }\n        addDescendantStatesToEnter(s, historyValue, statesForDefaultEntry, statesToEnter);\n      }\n      for (const s of historyDefaultTransition.target) {\n        addProperAncestorStatesToEnter(s, stateNode.parent, statesToEnter, historyValue, statesForDefaultEntry);\n      }\n    }\n  } else {\n    if (stateNode.type === 'compound') {\n      const [initialState] = stateNode.initial.target;\n      if (!isHistoryNode(initialState)) {\n        statesToEnter.add(initialState);\n        statesForDefaultEntry.add(initialState);\n      }\n      addDescendantStatesToEnter(initialState, historyValue, statesForDefaultEntry, statesToEnter);\n      addProperAncestorStatesToEnter(initialState, stateNode, statesToEnter, historyValue, statesForDefaultEntry);\n    } else {\n      if (stateNode.type === 'parallel') {\n        for (const child of getChildren(stateNode).filter(sn => !isHistoryNode(sn))) {\n          if (![...statesToEnter].some(s => isDescendant(s, child))) {\n            if (!isHistoryNode(child)) {\n              statesToEnter.add(child);\n              statesForDefaultEntry.add(child);\n            }\n            addDescendantStatesToEnter(child, historyValue, statesForDefaultEntry, statesToEnter);\n          }\n        }\n      }\n    }\n  }\n}\nfunction addAncestorStatesToEnter(statesToEnter, historyValue, statesForDefaultEntry, ancestors, reentrancyDomain) {\n  for (const anc of ancestors) {\n    if (!reentrancyDomain || isDescendant(anc, reentrancyDomain)) {\n      statesToEnter.add(anc);\n    }\n    if (anc.type === 'parallel') {\n      for (const child of getChildren(anc).filter(sn => !isHistoryNode(sn))) {\n        if (![...statesToEnter].some(s => isDescendant(s, child))) {\n          statesToEnter.add(child);\n          addDescendantStatesToEnter(child, historyValue, statesForDefaultEntry, statesToEnter);\n        }\n      }\n    }\n  }\n}\nfunction addProperAncestorStatesToEnter(stateNode, toStateNode, statesToEnter, historyValue, statesForDefaultEntry) {\n  addAncestorStatesToEnter(statesToEnter, historyValue, statesForDefaultEntry, getProperAncestors(stateNode, toStateNode));\n}\nfunction exitStates(currentSnapshot, event, actorScope, transitions, mutStateNodeSet, historyValue, internalQueue) {\n  let nextSnapshot = currentSnapshot;\n  const statesToExit = computeExitSet(transitions, mutStateNodeSet, historyValue);\n  statesToExit.sort((a, b) => b.order - a.order);\n  let changedHistory;\n\n  // From SCXML algorithm: https://www.w3.org/TR/scxml/#exitStates\n  for (const exitStateNode of statesToExit) {\n    for (const historyNode of getHistoryNodes(exitStateNode)) {\n      let predicate;\n      if (historyNode.history === 'deep') {\n        predicate = sn => isAtomicStateNode(sn) && isDescendant(sn, exitStateNode);\n      } else {\n        predicate = sn => {\n          return sn.parent === exitStateNode;\n        };\n      }\n      changedHistory ??= {\n        ...historyValue\n      };\n      changedHistory[historyNode.id] = Array.from(mutStateNodeSet).filter(predicate);\n    }\n  }\n  for (const s of statesToExit) {\n    nextSnapshot = resolveActionsAndContext(nextSnapshot, event, actorScope, [...s.exit, ...s.invoke.map(def => stopChild(def.id))], internalQueue);\n    mutStateNodeSet.delete(s);\n  }\n  return [nextSnapshot, changedHistory || historyValue];\n}\nlet executingCustomAction = false;\nfunction resolveAndExecuteActionsWithContext(currentSnapshot, event, actorScope, actions, extra, retries) {\n  const {\n    machine\n  } = currentSnapshot;\n  let intermediateSnapshot = currentSnapshot;\n  for (const action of actions) {\n    const isInline = typeof action === 'function';\n    const resolvedAction = isInline ? action :\n    // the existing type of `.actions` assumes non-nullable `TExpressionAction`\n    // it's fine to cast this here to get a common type and lack of errors in the rest of the code\n    // our logic below makes sure that we call those 2 \"variants\" correctly\n    machine.implementations.actions[typeof action === 'string' ? action : action.type];\n    if (!resolvedAction) {\n      continue;\n    }\n    const actionArgs = {\n      context: intermediateSnapshot.context,\n      event,\n      self: actorScope.self,\n      system: actorScope.system\n    };\n    const actionParams = isInline || typeof action === 'string' ? undefined : 'params' in action ? typeof action.params === 'function' ? action.params({\n      context: intermediateSnapshot.context,\n      event\n    }) : action.params : undefined;\n    function executeAction() {\n      actorScope.system._sendInspectionEvent({\n        type: '@xstate.action',\n        actorRef: actorScope.self,\n        action: {\n          type: typeof action === 'string' ? action : typeof action === 'object' ? action.type : action.name || '(anonymous)',\n          params: actionParams\n        }\n      });\n      try {\n        executingCustomAction = resolvedAction;\n        resolvedAction(actionArgs, actionParams);\n      } finally {\n        executingCustomAction = false;\n      }\n    }\n    if (!('resolve' in resolvedAction)) {\n      if (actorScope.self._processingStatus === ProcessingStatus.Running) {\n        executeAction();\n      } else {\n        actorScope.defer(() => {\n          executeAction();\n        });\n      }\n      continue;\n    }\n    const builtinAction = resolvedAction;\n    const [nextState, params, actions] = builtinAction.resolve(actorScope, intermediateSnapshot, actionArgs, actionParams, resolvedAction,\n    // this holds all params\n    extra);\n    intermediateSnapshot = nextState;\n    if ('retryResolve' in builtinAction) {\n      retries?.push([builtinAction, params]);\n    }\n    if ('execute' in builtinAction) {\n      if (actorScope.self._processingStatus === ProcessingStatus.Running) {\n        builtinAction.execute(actorScope, params);\n      } else {\n        actorScope.defer(builtinAction.execute.bind(null, actorScope, params));\n      }\n    }\n    if (actions) {\n      intermediateSnapshot = resolveAndExecuteActionsWithContext(intermediateSnapshot, event, actorScope, actions, extra, retries);\n    }\n  }\n  return intermediateSnapshot;\n}\nfunction resolveActionsAndContext(currentSnapshot, event, actorScope, actions, internalQueue, deferredActorIds) {\n  const retries = deferredActorIds ? [] : undefined;\n  const nextState = resolveAndExecuteActionsWithContext(currentSnapshot, event, actorScope, actions, {\n    internalQueue,\n    deferredActorIds\n  }, retries);\n  retries?.forEach(_ref14 => {\n    let [builtinAction, params] = _ref14;\n    builtinAction.retryResolve(actorScope, nextState, params);\n  });\n  return nextState;\n}\nfunction macrostep(snapshot, event, actorScope) {\n  let internalQueue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  let nextSnapshot = snapshot;\n  const microstates = [];\n  function addMicrostate(microstate, event, transitions) {\n    actorScope.system._sendInspectionEvent({\n      type: '@xstate.microstep',\n      actorRef: actorScope.self,\n      event,\n      snapshot: microstate,\n      _transitions: transitions\n    });\n    microstates.push(microstate);\n  }\n\n  // Handle stop event\n  if (event.type === XSTATE_STOP) {\n    nextSnapshot = cloneMachineSnapshot(stopChildren(nextSnapshot, event, actorScope), {\n      status: 'stopped'\n    });\n    addMicrostate(nextSnapshot, event, []);\n    return {\n      snapshot: nextSnapshot,\n      microstates\n    };\n  }\n  let nextEvent = event;\n\n  // Assume the state is at rest (no raised events)\n  // Determine the next state based on the next microstep\n  if (nextEvent.type !== XSTATE_INIT) {\n    const currentEvent = nextEvent;\n    const isErr = isErrorActorEvent(currentEvent);\n    const transitions = selectTransitions(currentEvent, nextSnapshot);\n    if (isErr && !transitions.length) {\n      // TODO: we should likely only allow transitions selected by very explicit descriptors\n      // `*` shouldn't be matched, likely `xstate.error.*` shouldnt be either\n      // similarly `xstate.error.actor.*` and `xstate.error.actor.todo.*` have to be considered too\n      nextSnapshot = cloneMachineSnapshot(snapshot, {\n        status: 'error',\n        error: currentEvent.error\n      });\n      addMicrostate(nextSnapshot, currentEvent, []);\n      return {\n        snapshot: nextSnapshot,\n        microstates\n      };\n    }\n    nextSnapshot = microstep(transitions, snapshot, actorScope, nextEvent, false,\n    // isInitial\n    internalQueue);\n    addMicrostate(nextSnapshot, currentEvent, transitions);\n  }\n  let shouldSelectEventlessTransitions = true;\n  while (nextSnapshot.status === 'active') {\n    let enabledTransitions = shouldSelectEventlessTransitions ? selectEventlessTransitions(nextSnapshot, nextEvent) : [];\n\n    // eventless transitions should always be selected after selecting *regular* transitions\n    // by assigning `undefined` to `previousState` we ensure that `shouldSelectEventlessTransitions` gets always computed to true in such a case\n    const previousState = enabledTransitions.length ? nextSnapshot : undefined;\n    if (!enabledTransitions.length) {\n      if (!internalQueue.length) {\n        break;\n      }\n      nextEvent = internalQueue.shift();\n      enabledTransitions = selectTransitions(nextEvent, nextSnapshot);\n    }\n    nextSnapshot = microstep(enabledTransitions, nextSnapshot, actorScope, nextEvent, false, internalQueue);\n    shouldSelectEventlessTransitions = nextSnapshot !== previousState;\n    addMicrostate(nextSnapshot, nextEvent, enabledTransitions);\n  }\n  if (nextSnapshot.status !== 'active') {\n    stopChildren(nextSnapshot, nextEvent, actorScope);\n  }\n  return {\n    snapshot: nextSnapshot,\n    microstates\n  };\n}\nfunction stopChildren(nextState, event, actorScope) {\n  return resolveActionsAndContext(nextState, event, actorScope, Object.values(nextState.children).map(child => stopChild(child)), []);\n}\nfunction selectTransitions(event, nextState) {\n  return nextState.machine.getTransitionData(nextState, event);\n}\nfunction selectEventlessTransitions(nextState, event) {\n  const enabledTransitionSet = new Set();\n  const atomicStates = nextState._nodes.filter(isAtomicStateNode);\n  for (const stateNode of atomicStates) {\n    loop: for (const s of [stateNode].concat(getProperAncestors(stateNode, undefined))) {\n      if (!s.always) {\n        continue;\n      }\n      for (const transition of s.always) {\n        if (transition.guard === undefined || evaluateGuard(transition.guard, nextState.context, event, nextState)) {\n          enabledTransitionSet.add(transition);\n          break loop;\n        }\n      }\n    }\n  }\n  return removeConflictingTransitions(Array.from(enabledTransitionSet), new Set(nextState._nodes), nextState.historyValue);\n}\n\n/**\n * Resolves a partial state value with its full representation in the state\n * node's machine.\n *\n * @param stateValue The partial state value to resolve.\n */\nfunction resolveStateValue(rootNode, stateValue) {\n  const allStateNodes = getAllStateNodes(getStateNodes(rootNode, stateValue));\n  return getStateValue(rootNode, [...allStateNodes]);\n}\nfunction isMachineSnapshot(value) {\n  return !!value && typeof value === 'object' && 'machine' in value && 'value' in value;\n}\nconst machineSnapshotMatches = function matches(testValue) {\n  return matchesState(testValue, this.value);\n};\nconst machineSnapshotHasTag = function hasTag(tag) {\n  return this.tags.has(tag);\n};\nconst machineSnapshotCan = function can(event) {\n  const transitionData = this.machine.getTransitionData(this, event);\n  return !!transitionData?.length &&\n  // Check that at least one transition is not forbidden\n  transitionData.some(t => t.target !== undefined || t.actions.length);\n};\nconst machineSnapshotToJSON = function toJSON() {\n  const {\n    _nodes: nodes,\n    tags,\n    machine,\n    getMeta,\n    toJSON,\n    can,\n    hasTag,\n    matches,\n    ...jsonValues\n  } = this;\n  return {\n    ...jsonValues,\n    tags: Array.from(tags)\n  };\n};\nconst machineSnapshotGetMeta = function getMeta() {\n  return this._nodes.reduce((acc, stateNode) => {\n    if (stateNode.meta !== undefined) {\n      acc[stateNode.id] = stateNode.meta;\n    }\n    return acc;\n  }, {});\n};\nfunction createMachineSnapshot(config, machine) {\n  return {\n    status: config.status,\n    output: config.output,\n    error: config.error,\n    machine,\n    context: config.context,\n    _nodes: config._nodes,\n    value: getStateValue(machine.root, config._nodes),\n    tags: new Set(config._nodes.flatMap(sn => sn.tags)),\n    children: config.children,\n    historyValue: config.historyValue || {},\n    matches: machineSnapshotMatches,\n    hasTag: machineSnapshotHasTag,\n    can: machineSnapshotCan,\n    getMeta: machineSnapshotGetMeta,\n    toJSON: machineSnapshotToJSON\n  };\n}\nfunction cloneMachineSnapshot(snapshot) {\n  let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return createMachineSnapshot({\n    ...snapshot,\n    ...config\n  }, snapshot.machine);\n}\nfunction getPersistedSnapshot(snapshot, options) {\n  const {\n    _nodes: nodes,\n    tags,\n    machine,\n    children,\n    context,\n    can,\n    hasTag,\n    matches,\n    getMeta,\n    toJSON,\n    ...jsonValues\n  } = snapshot;\n  const childrenJson = {};\n  for (const id in children) {\n    const child = children[id];\n    childrenJson[id] = {\n      snapshot: child.getPersistedSnapshot(options),\n      src: child.src,\n      systemId: child._systemId,\n      syncSnapshot: child._syncSnapshot\n    };\n  }\n  const persisted = {\n    ...jsonValues,\n    context: persistContext(context),\n    children: childrenJson\n  };\n  return persisted;\n}\nfunction persistContext(contextPart) {\n  let copy;\n  for (const key in contextPart) {\n    const value = contextPart[key];\n    if (value && typeof value === 'object') {\n      if ('sessionId' in value && 'send' in value && 'ref' in value) {\n        copy ??= Array.isArray(contextPart) ? contextPart.slice() : {\n          ...contextPart\n        };\n        copy[key] = {\n          xstate$$type: $$ACTOR_TYPE,\n          id: value.id\n        };\n      } else {\n        const result = persistContext(value);\n        if (result !== value) {\n          copy ??= Array.isArray(contextPart) ? contextPart.slice() : {\n            ...contextPart\n          };\n          copy[key] = result;\n        }\n      }\n    }\n  }\n  return copy ?? contextPart;\n}\nfunction resolveRaise(_, snapshot, args, actionParams, _ref15, _ref16) {\n  let {\n    event: eventOrExpr,\n    id,\n    delay\n  } = _ref15;\n  let {\n    internalQueue\n  } = _ref16;\n  const delaysMap = snapshot.machine.implementations.delays;\n  if (typeof eventOrExpr === 'string') {\n    throw new Error(`Only event objects may be used with raise; use raise({ type: \"${eventOrExpr}\" }) instead`);\n  }\n  const resolvedEvent = typeof eventOrExpr === 'function' ? eventOrExpr(args, actionParams) : eventOrExpr;\n  let resolvedDelay;\n  if (typeof delay === 'string') {\n    const configDelay = delaysMap && delaysMap[delay];\n    resolvedDelay = typeof configDelay === 'function' ? configDelay(args, actionParams) : configDelay;\n  } else {\n    resolvedDelay = typeof delay === 'function' ? delay(args, actionParams) : delay;\n  }\n  if (typeof resolvedDelay !== 'number') {\n    internalQueue.push(resolvedEvent);\n  }\n  return [snapshot, {\n    event: resolvedEvent,\n    id,\n    delay: resolvedDelay\n  }];\n}\nfunction executeRaise(actorScope, params) {\n  const {\n    event,\n    delay,\n    id\n  } = params;\n  if (typeof delay === 'number') {\n    actorScope.defer(() => {\n      const self = actorScope.self;\n      actorScope.system.scheduler.schedule(self, self, event, delay, id);\n    });\n    return;\n  }\n}\n/**\n * Raises an event. This places the event in the internal event queue, so that\n * the event is immediately consumed by the machine in the current step.\n *\n * @param eventType The event to raise.\n */\nfunction raise(eventOrExpr, options) {\n  function raise(args, params) {}\n  raise.type = 'xstate.raise';\n  raise.event = eventOrExpr;\n  raise.id = options?.id;\n  raise.delay = options?.delay;\n  raise.resolve = resolveRaise;\n  raise.execute = executeRaise;\n  return raise;\n}\nexport { $$ACTOR_TYPE as $, createActor as A, Actor as B, interpret as C, and as D, not as E, or as F, stateIn as G, isMachineSnapshot as H, getAllOwnEventDescriptors as I, matchesState as J, pathToStateValue as K, toObserver as L, cancel as M, NULL_EVENT as N, raise as O, spawnChild as P, stop as Q, stopChild as R, STATE_DELIMITER as S, ProcessingStatus as T, cloneMachineSnapshot as U, XSTATE_ERROR as V, createErrorActorEvent as W, XSTATE_STOP as X, toTransitionConfigArray as a, formatTransition as b, createInvokeId as c, formatInitialTransition as d, evaluateGuard as e, formatTransitions as f, getDelayedTransitions as g, getCandidates as h, getAllStateNodes as i, getStateNodes as j, createMachineSnapshot as k, isInFinalState as l, mapValues as m, macrostep as n, transitionNode as o, resolveActionsAndContext as p, createInitEvent as q, resolveStateValue as r, microstep as s, toArray as t, getInitialStateNodes as u, toStatePath as v, isStateId as w, getStateNodeByPath as x, getPersistedSnapshot as y, resolveReferencedActor as z };","map":{"version":3,"names":["devToolsAdapter","Mailbox","constructor","_process","_active","_current","_last","start","flush","clear","next","enqueue","event","enqueued","value","consumed","STATE_DELIMITER","TARGETLESS_KEY","NULL_EVENT","STATE_IDENTIFIER","WILDCARD","XSTATE_INIT","XSTATE_ERROR","XSTATE_STOP","createAfterEvent","delayRef","id","type","createDoneStateEvent","output","createDoneActorEvent","invokeId","actorId","createErrorActorEvent","error","createInitEvent","input","reportUnhandledError","err","setTimeout","symbolObservable","Symbol","observable","matchesState","parentStateId","childStateId","parentStateValue","toStateValue","childStateValue","Object","keys","every","key","toStatePath","stateId","isArray","result","segment","i","length","char","charCodeAt","push","stateValue","isMachineSnapshot","statePath","pathToStateValue","marker","previous","mapValues","collection","iteratee","collectionKeys","toArrayStrict","toArray","undefined","resolveOutput","mapper","context","self","Array","isErrorActorEvent","startsWith","toTransitionConfigArray","configLike","map","transitionLike","target","normalizeTarget","toObserver","nextHandler","errorHandler","completionHandler","isObserver","bind","complete","createInvokeId","stateNodeId","index","resolveReferencedActor","machine","src","match","implementations","actors","indexStr","nodeId","node","getStateNodeById","invokeConfig","config","invoke","getAllOwnEventDescriptors","snapshot","Set","_nodes","flatMap","sn","ownEvents","createScheduledEventId","actorRef","sessionId","idCounter","createSystem","rootActor","options","children","Map","keyedActors","reverseKeyedActors","WeakMap","inspectionObservers","timerMap","clock","logger","scheduler","schedule","source","delay","arguments","Math","random","toString","slice","scheduledEvent","startedAt","Date","now","scheduledEventId","system","_snapshot","_scheduledEvents","timeout","_relay","cancel","clearTimeout","cancelAll","sendInspectionEvent","size","resolvedInspectionEvent","rootId","forEach","observer","_bookId","_register","set","_unregister","delete","systemId","get","_set","existing","Error","inspect","observerOrFn","add","unsubscribe","_sendInspectionEvent","sourceRef","_send","getSnapshot","scheduledEvents","scheduledId","_clock","_logger","$$ACTOR_TYPE","ProcessingStatus","defaultOptions","fn","ms","console","log","devTools","Actor","logic","mailbox","observers","eventListeners","_processingStatus","NotStarted","_parent","_syncSnapshot","ref","_actorScope","_systemId","_doneEvent","_deferred","resolvedOptions","parent","syncSnapshot","defer","stopChild","child","_stop","emit","emittedEvent","listeners","wildcardListener","allListeners","values","handler","from","send","_initState","state","status","persistedState","restoreSnapshot","getInitialSnapshot","update","deferredFn","shift","_stopProcedure","_complete","_error","subscribe","nextListenerOrObserver","errorListener","completeListener","Stopped","on","wrappedHandler","Running","initEvent","attachDevTools","nextState","caughtError","transition","stop","_reportError","reportError","err2","resolvedDevToolsAdapter","toJSON","xstate$$type","getPersistedSnapshot","createActor","_len","_ref","_key","interpret","resolveCancel","_","actionArgs","actionParams","_ref2","sendId","resolvedSendId","executeCancel","actorScope","args","params","resolve","execute","resolveSpawn","_actionParams","_ref3","resolvedId","cloneMachineSnapshot","executeSpawn","_ref4","spawnChild","_len2","_ref5","_key2","resolveStop","_ref6","actorRefOrString","resolvedActorRef","executeStop","checkStateIn","_ref7","isStateId","some","matches","stateIn","check","checkNot","_ref8","_ref9","guards","evaluateGuard","not","guard","checkAnd","_ref10","_ref11","and","checkOr","_ref12","_ref13","or","isInline","resolved","guardArgs","guardParams","builtinGuard","isAtomicStateNode","stateNode","getChildren","states","filter","getProperAncestors","toStateNode","ancestors","m","getAllStateNodes","stateNodes","nodeSet","adjList","getAdjList","s","getInitialStateNodesWithTheirAncestors","has","initialStates","initialStateNode","getValueFromAdj","baseNode","childStateNodes","childStateNode","getStateValue","rootNode","isInFinalState","stateNodeSet","str","getCandidates","receivedEventType","candidates","transitions","eventDescriptor","endsWith","partialEventTokens","split","eventTokens","tokenIndex","partialEventToken","eventToken","isLastToken","sort","a","b","getDelayedTransitions","afterConfig","after","mutateEntryExit","afterEvent","eventType","entry","raise","exit","delayedTransitions","configTransition","resolvedTransition","resolvedDelay","Number","isNaN","delayedTransition","formatTransition","descriptor","transitionConfig","normalizedTarget","reenter","resolveTarget","actions","t","formatTransitions","transitionsConfig","onDone","invokeDef","onError","onSnapshot","formatInitialTransition","_target","resolvedTarget","targets","isInternalTarget","getStateNodeByPath","targetStateNode","message","resolveHistoryDefaultTransition","initial","isHistoryNode","getInitialStateNodes","initialState","ancestor","iter","descStateNode","getStateNode","stateKey","e","arrayStatePath","currentStateNode","getStateNodes","childStateKeys","subStateKey","Boolean","root","concat","reduce","allSubStateNodes","subStateNode","subStateNodes","transitionAtomicNode","transitionCompoundNode","subStateKeys","transitionNode","transitionParallelNode","allInnerTransitions","subStateValue","innerTransitions","getHistoryNodes","isDescendant","parentStateNode","hasIntersection","s1","s2","set1","set2","item","removeConflictingTransitions","enabledTransitions","historyValue","filteredTransitions","t1","t1Preempted","transitionsToRemove","t2","computeExitSet","t3","findLeastCommonAncestor","head","tail","getEffectiveTargetStates","targetNode","getTransitionDomain","targetStates","lca","statesToExit","domain","areStateNodeCollectionsEqual","prevStateNodes","nextStateNodeSet","microstep","currentSnapshot","isInitial","internalQueue","mutStateNodeSet","exitStates","resolveActionsAndContext","enterStates","nextStateNodes","order","getMachineOutput","rootCompletionNode","doneStateEvent","nextSnapshot","statesToEnter","statesForDefaultEntry","computeEntrySet","completedNodes","stateNodeToEnter","initialActions","ancestorMarker","addDescendantStatesToEnter","addAncestorStatesToEnter","historyStateNodes","addProperAncestorStatesToEnter","historyDefaultTransition","reentrancyDomain","anc","changedHistory","exitStateNode","historyNode","predicate","history","def","executingCustomAction","resolveAndExecuteActionsWithContext","extra","retries","intermediateSnapshot","action","resolvedAction","executeAction","name","builtinAction","deferredActorIds","_ref14","retryResolve","macrostep","microstates","addMicrostate","microstate","_transitions","stopChildren","nextEvent","currentEvent","isErr","selectTransitions","shouldSelectEventlessTransitions","selectEventlessTransitions","previousState","getTransitionData","enabledTransitionSet","atomicStates","loop","always","resolveStateValue","allStateNodes","machineSnapshotMatches","testValue","machineSnapshotHasTag","hasTag","tag","tags","machineSnapshotCan","can","transitionData","machineSnapshotToJSON","nodes","getMeta","jsonValues","machineSnapshotGetMeta","acc","meta","createMachineSnapshot","childrenJson","persisted","persistContext","contextPart","copy","resolveRaise","_ref15","_ref16","eventOrExpr","delaysMap","delays","resolvedEvent","configDelay","executeRaise","$","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","c","d","f","g","h","j","k","l","n","o","p","q","r","u","v","w","x","y","z"],"sources":["/Users/evgeniy/react-player/node_modules/xstate/dist/raise-0f7cf128.esm.js"],"sourcesContent":["import { devToolsAdapter } from '../dev/dist/xstate-dev.esm.js';\n\nclass Mailbox {\n  constructor(_process) {\n    this._process = _process;\n    this._active = false;\n    this._current = null;\n    this._last = null;\n  }\n  start() {\n    this._active = true;\n    this.flush();\n  }\n  clear() {\n    // we can't set _current to null because we might be currently processing\n    // and enqueue following clear shouldnt start processing the enqueued item immediately\n    if (this._current) {\n      this._current.next = null;\n      this._last = this._current;\n    }\n  }\n  enqueue(event) {\n    const enqueued = {\n      value: event,\n      next: null\n    };\n    if (this._current) {\n      this._last.next = enqueued;\n      this._last = enqueued;\n      return;\n    }\n    this._current = enqueued;\n    this._last = enqueued;\n    if (this._active) {\n      this.flush();\n    }\n  }\n  flush() {\n    while (this._current) {\n      // atm the given _process is responsible for implementing proper try/catch handling\n      // we assume here that this won't throw in a way that can affect this mailbox\n      const consumed = this._current;\n      this._process(consumed.value);\n      this._current = consumed.next;\n    }\n    this._last = null;\n  }\n}\n\nconst STATE_DELIMITER = '.';\nconst TARGETLESS_KEY = '';\nconst NULL_EVENT = '';\nconst STATE_IDENTIFIER = '#';\nconst WILDCARD = '*';\nconst XSTATE_INIT = 'xstate.init';\nconst XSTATE_ERROR = 'xstate.error';\nconst XSTATE_STOP = 'xstate.stop';\n\n/**\n * Returns an event that represents an implicit event that is sent after the\n * specified `delay`.\n *\n * @param delayRef The delay in milliseconds\n * @param id The state node ID where this event is handled\n */\nfunction createAfterEvent(delayRef, id) {\n  return {\n    type: `xstate.after.${delayRef}.${id}`\n  };\n}\n\n/**\n * Returns an event that represents that a final state node has been reached in\n * the parent state node.\n *\n * @param id The final state node's parent state node `id`\n * @param output The data to pass into the event\n */\nfunction createDoneStateEvent(id, output) {\n  return {\n    type: `xstate.done.state.${id}`,\n    output\n  };\n}\n\n/**\n * Returns an event that represents that an invoked service has terminated.\n *\n * An invoked service is terminated when it has reached a top-level final state\n * node, but not when it is canceled.\n *\n * @param invokeId The invoked service ID\n * @param output The data to pass into the event\n */\nfunction createDoneActorEvent(invokeId, output) {\n  return {\n    type: `xstate.done.actor.${invokeId}`,\n    output,\n    actorId: invokeId\n  };\n}\nfunction createErrorActorEvent(id, error) {\n  return {\n    type: `xstate.error.actor.${id}`,\n    error,\n    actorId: id\n  };\n}\nfunction createInitEvent(input) {\n  return {\n    type: XSTATE_INIT,\n    input\n  };\n}\n\n/**\n * This function makes sure that unhandled errors are thrown in a separate\n * macrotask. It allows those errors to be detected by global error handlers and\n * reported to bug tracking services without interrupting our own stack of\n * execution.\n *\n * @param err Error to be thrown\n */\nfunction reportUnhandledError(err) {\n  setTimeout(() => {\n    throw err;\n  });\n}\n\nconst symbolObservable = (() => typeof Symbol === 'function' && Symbol.observable || '@@observable')();\n\nfunction matchesState(parentStateId, childStateId) {\n  const parentStateValue = toStateValue(parentStateId);\n  const childStateValue = toStateValue(childStateId);\n  if (typeof childStateValue === 'string') {\n    if (typeof parentStateValue === 'string') {\n      return childStateValue === parentStateValue;\n    }\n\n    // Parent more specific than child\n    return false;\n  }\n  if (typeof parentStateValue === 'string') {\n    return parentStateValue in childStateValue;\n  }\n  return Object.keys(parentStateValue).every(key => {\n    if (!(key in childStateValue)) {\n      return false;\n    }\n    return matchesState(parentStateValue[key], childStateValue[key]);\n  });\n}\nfunction toStatePath(stateId) {\n  if (isArray(stateId)) {\n    return stateId;\n  }\n  let result = [];\n  let segment = '';\n  for (let i = 0; i < stateId.length; i++) {\n    const char = stateId.charCodeAt(i);\n    switch (char) {\n      // \\\n      case 92:\n        // consume the next character\n        segment += stateId[i + 1];\n        // and skip over it\n        i++;\n        continue;\n      // .\n      case 46:\n        result.push(segment);\n        segment = '';\n        continue;\n    }\n    segment += stateId[i];\n  }\n  result.push(segment);\n  return result;\n}\nfunction toStateValue(stateValue) {\n  if (isMachineSnapshot(stateValue)) {\n    return stateValue.value;\n  }\n  if (typeof stateValue !== 'string') {\n    return stateValue;\n  }\n  const statePath = toStatePath(stateValue);\n  return pathToStateValue(statePath);\n}\nfunction pathToStateValue(statePath) {\n  if (statePath.length === 1) {\n    return statePath[0];\n  }\n  const value = {};\n  let marker = value;\n  for (let i = 0; i < statePath.length - 1; i++) {\n    if (i === statePath.length - 2) {\n      marker[statePath[i]] = statePath[i + 1];\n    } else {\n      const previous = marker;\n      marker = {};\n      previous[statePath[i]] = marker;\n    }\n  }\n  return value;\n}\nfunction mapValues(collection, iteratee) {\n  const result = {};\n  const collectionKeys = Object.keys(collection);\n  for (let i = 0; i < collectionKeys.length; i++) {\n    const key = collectionKeys[i];\n    result[key] = iteratee(collection[key], key, collection, i);\n  }\n  return result;\n}\nfunction toArrayStrict(value) {\n  if (isArray(value)) {\n    return value;\n  }\n  return [value];\n}\nfunction toArray(value) {\n  if (value === undefined) {\n    return [];\n  }\n  return toArrayStrict(value);\n}\nfunction resolveOutput(mapper, context, event, self) {\n  if (typeof mapper === 'function') {\n    return mapper({\n      context,\n      event,\n      self\n    });\n  }\n  return mapper;\n}\nfunction isArray(value) {\n  return Array.isArray(value);\n}\nfunction isErrorActorEvent(event) {\n  return event.type.startsWith('xstate.error.actor');\n}\nfunction toTransitionConfigArray(configLike) {\n  return toArrayStrict(configLike).map(transitionLike => {\n    if (typeof transitionLike === 'undefined' || typeof transitionLike === 'string') {\n      return {\n        target: transitionLike\n      };\n    }\n    return transitionLike;\n  });\n}\nfunction normalizeTarget(target) {\n  if (target === undefined || target === TARGETLESS_KEY) {\n    return undefined;\n  }\n  return toArray(target);\n}\nfunction toObserver(nextHandler, errorHandler, completionHandler) {\n  const isObserver = typeof nextHandler === 'object';\n  const self = isObserver ? nextHandler : undefined;\n  return {\n    next: (isObserver ? nextHandler.next : nextHandler)?.bind(self),\n    error: (isObserver ? nextHandler.error : errorHandler)?.bind(self),\n    complete: (isObserver ? nextHandler.complete : completionHandler)?.bind(self)\n  };\n}\nfunction createInvokeId(stateNodeId, index) {\n  return `${index}.${stateNodeId}`;\n}\nfunction resolveReferencedActor(machine, src) {\n  const match = src.match(/^xstate\\.invoke\\.(\\d+)\\.(.*)/);\n  if (!match) {\n    return machine.implementations.actors[src];\n  }\n  const [, indexStr, nodeId] = match;\n  const node = machine.getStateNodeById(nodeId);\n  const invokeConfig = node.config.invoke;\n  return (Array.isArray(invokeConfig) ? invokeConfig[indexStr] : invokeConfig).src;\n}\nfunction getAllOwnEventDescriptors(snapshot) {\n  return [...new Set([...snapshot._nodes.flatMap(sn => sn.ownEvents)])];\n}\n\nfunction createScheduledEventId(actorRef, id) {\n  return `${actorRef.sessionId}.${id}`;\n}\nlet idCounter = 0;\nfunction createSystem(rootActor, options) {\n  const children = new Map();\n  const keyedActors = new Map();\n  const reverseKeyedActors = new WeakMap();\n  const inspectionObservers = new Set();\n  const timerMap = {};\n  const {\n    clock,\n    logger\n  } = options;\n  const scheduler = {\n    schedule: (source, target, event, delay, id = Math.random().toString(36).slice(2)) => {\n      const scheduledEvent = {\n        source,\n        target,\n        event,\n        delay,\n        id,\n        startedAt: Date.now()\n      };\n      const scheduledEventId = createScheduledEventId(source, id);\n      system._snapshot._scheduledEvents[scheduledEventId] = scheduledEvent;\n      const timeout = clock.setTimeout(() => {\n        delete timerMap[scheduledEventId];\n        delete system._snapshot._scheduledEvents[scheduledEventId];\n        system._relay(source, target, event);\n      }, delay);\n      timerMap[scheduledEventId] = timeout;\n    },\n    cancel: (source, id) => {\n      const scheduledEventId = createScheduledEventId(source, id);\n      const timeout = timerMap[scheduledEventId];\n      delete timerMap[scheduledEventId];\n      delete system._snapshot._scheduledEvents[scheduledEventId];\n      if (timeout !== undefined) {\n        clock.clearTimeout(timeout);\n      }\n    },\n    cancelAll: actorRef => {\n      for (const scheduledEventId in system._snapshot._scheduledEvents) {\n        const scheduledEvent = system._snapshot._scheduledEvents[scheduledEventId];\n        if (scheduledEvent.source === actorRef) {\n          scheduler.cancel(actorRef, scheduledEvent.id);\n        }\n      }\n    }\n  };\n  const sendInspectionEvent = event => {\n    if (!inspectionObservers.size) {\n      return;\n    }\n    const resolvedInspectionEvent = {\n      ...event,\n      rootId: rootActor.sessionId\n    };\n    inspectionObservers.forEach(observer => observer.next?.(resolvedInspectionEvent));\n  };\n  const system = {\n    _snapshot: {\n      _scheduledEvents: (options?.snapshot && options.snapshot.scheduler) ?? {}\n    },\n    _bookId: () => `x:${idCounter++}`,\n    _register: (sessionId, actorRef) => {\n      children.set(sessionId, actorRef);\n      return sessionId;\n    },\n    _unregister: actorRef => {\n      children.delete(actorRef.sessionId);\n      const systemId = reverseKeyedActors.get(actorRef);\n      if (systemId !== undefined) {\n        keyedActors.delete(systemId);\n        reverseKeyedActors.delete(actorRef);\n      }\n    },\n    get: systemId => {\n      return keyedActors.get(systemId);\n    },\n    _set: (systemId, actorRef) => {\n      const existing = keyedActors.get(systemId);\n      if (existing && existing !== actorRef) {\n        throw new Error(`Actor with system ID '${systemId}' already exists.`);\n      }\n      keyedActors.set(systemId, actorRef);\n      reverseKeyedActors.set(actorRef, systemId);\n    },\n    inspect: observerOrFn => {\n      const observer = toObserver(observerOrFn);\n      inspectionObservers.add(observer);\n      return {\n        unsubscribe() {\n          inspectionObservers.delete(observer);\n        }\n      };\n    },\n    _sendInspectionEvent: sendInspectionEvent,\n    _relay: (source, target, event) => {\n      system._sendInspectionEvent({\n        type: '@xstate.event',\n        sourceRef: source,\n        actorRef: target,\n        event\n      });\n      target._send(event);\n    },\n    scheduler,\n    getSnapshot: () => {\n      return {\n        _scheduledEvents: {\n          ...system._snapshot._scheduledEvents\n        }\n      };\n    },\n    start: () => {\n      const scheduledEvents = system._snapshot._scheduledEvents;\n      system._snapshot._scheduledEvents = {};\n      for (const scheduledId in scheduledEvents) {\n        const {\n          source,\n          target,\n          event,\n          delay,\n          id\n        } = scheduledEvents[scheduledId];\n        scheduler.schedule(source, target, event, delay, id);\n      }\n    },\n    _clock: clock,\n    _logger: logger\n  };\n  return system;\n}\n\nconst $$ACTOR_TYPE = 1;\n\n// those values are currently used by @xstate/react directly so it's important to keep the assigned values in sync\nlet ProcessingStatus = /*#__PURE__*/function (ProcessingStatus) {\n  ProcessingStatus[ProcessingStatus[\"NotStarted\"] = 0] = \"NotStarted\";\n  ProcessingStatus[ProcessingStatus[\"Running\"] = 1] = \"Running\";\n  ProcessingStatus[ProcessingStatus[\"Stopped\"] = 2] = \"Stopped\";\n  return ProcessingStatus;\n}({});\nconst defaultOptions = {\n  clock: {\n    setTimeout: (fn, ms) => {\n      return setTimeout(fn, ms);\n    },\n    clearTimeout: id => {\n      return clearTimeout(id);\n    }\n  },\n  logger: console.log.bind(console),\n  devTools: false\n};\n\n/**\n * An Actor is a running process that can receive events, send events and change\n * its behavior based on the events it receives, which can cause effects outside\n * of the actor. When you run a state machine, it becomes an actor.\n */\nclass Actor {\n  /**\n   * Creates a new actor instance for the given logic with the provided options,\n   * if any.\n   *\n   * @param logic The logic to create an actor from\n   * @param options Actor options\n   */\n  constructor(logic, options) {\n    this.logic = logic;\n    /** The current internal state of the actor. */\n    this._snapshot = void 0;\n    /**\n     * The clock that is responsible for setting and clearing timeouts, such as\n     * delayed events and transitions.\n     */\n    this.clock = void 0;\n    this.options = void 0;\n    /** The unique identifier for this actor relative to its parent. */\n    this.id = void 0;\n    this.mailbox = new Mailbox(this._process.bind(this));\n    this.observers = new Set();\n    this.eventListeners = new Map();\n    this.logger = void 0;\n    /** @internal */\n    this._processingStatus = ProcessingStatus.NotStarted;\n    // Actor Ref\n    this._parent = void 0;\n    /** @internal */\n    this._syncSnapshot = void 0;\n    this.ref = void 0;\n    // TODO: add typings for system\n    this._actorScope = void 0;\n    this._systemId = void 0;\n    /** The globally unique process ID for this invocation. */\n    this.sessionId = void 0;\n    /** The system to which this actor belongs. */\n    this.system = void 0;\n    this._doneEvent = void 0;\n    this.src = void 0;\n    // array of functions to defer\n    this._deferred = [];\n    const resolvedOptions = {\n      ...defaultOptions,\n      ...options\n    };\n    const {\n      clock,\n      logger,\n      parent,\n      syncSnapshot,\n      id,\n      systemId,\n      inspect\n    } = resolvedOptions;\n    this.system = parent ? parent.system : createSystem(this, {\n      clock,\n      logger\n    });\n    if (inspect && !parent) {\n      // Always inspect at the system-level\n      this.system.inspect(toObserver(inspect));\n    }\n    this.sessionId = this.system._bookId();\n    this.id = id ?? this.sessionId;\n    this.logger = options?.logger ?? this.system._logger;\n    this.clock = options?.clock ?? this.system._clock;\n    this._parent = parent;\n    this._syncSnapshot = syncSnapshot;\n    this.options = resolvedOptions;\n    this.src = resolvedOptions.src ?? logic;\n    this.ref = this;\n    this._actorScope = {\n      self: this,\n      id: this.id,\n      sessionId: this.sessionId,\n      logger: this.logger,\n      defer: fn => {\n        this._deferred.push(fn);\n      },\n      system: this.system,\n      stopChild: child => {\n        if (child._parent !== this) {\n          throw new Error(`Cannot stop child actor ${child.id} of ${this.id} because it is not a child`);\n        }\n        child._stop();\n      },\n      emit: emittedEvent => {\n        const listeners = this.eventListeners.get(emittedEvent.type);\n        const wildcardListener = this.eventListeners.get('*');\n        if (!listeners && !wildcardListener) {\n          return;\n        }\n        const allListeners = new Set([...(listeners ? listeners.values() : []), ...(wildcardListener ? wildcardListener.values() : [])]);\n        for (const handler of Array.from(allListeners)) {\n          handler(emittedEvent);\n        }\n      }\n    };\n\n    // Ensure that the send method is bound to this Actor instance\n    // if destructured\n    this.send = this.send.bind(this);\n    this.system._sendInspectionEvent({\n      type: '@xstate.actor',\n      actorRef: this\n    });\n    if (systemId) {\n      this._systemId = systemId;\n      this.system._set(systemId, this);\n    }\n    this._initState(options?.snapshot ?? options?.state);\n    if (systemId && this._snapshot.status !== 'active') {\n      this.system._unregister(this);\n    }\n  }\n  _initState(persistedState) {\n    try {\n      this._snapshot = persistedState ? this.logic.restoreSnapshot ? this.logic.restoreSnapshot(persistedState, this._actorScope) : persistedState : this.logic.getInitialSnapshot(this._actorScope, this.options?.input);\n    } catch (err) {\n      // if we get here then it means that we assign a value to this._snapshot that is not of the correct type\n      // we can't get the true `TSnapshot & { status: 'error'; }`, it's impossible\n      // so right now this is a lie of sorts\n      this._snapshot = {\n        status: 'error',\n        output: undefined,\n        error: err\n      };\n    }\n  }\n  update(snapshot, event) {\n    // Update state\n    this._snapshot = snapshot;\n\n    // Execute deferred effects\n    let deferredFn;\n    while (deferredFn = this._deferred.shift()) {\n      try {\n        deferredFn();\n      } catch (err) {\n        // this error can only be caught when executing *initial* actions\n        // it's the only time when we call actions provided by the user through those deferreds\n        // when the actor is already running we always execute them synchronously while transitioning\n        // no \"builtin deferred\" should actually throw an error since they are either safe\n        // or the control flow is passed through the mailbox and errors should be caught by the `_process` used by the mailbox\n        this._deferred.length = 0;\n        this._snapshot = {\n          ...snapshot,\n          status: 'error',\n          error: err\n        };\n      }\n    }\n    switch (this._snapshot.status) {\n      case 'active':\n        for (const observer of this.observers) {\n          try {\n            observer.next?.(snapshot);\n          } catch (err) {\n            reportUnhandledError(err);\n          }\n        }\n        break;\n      case 'done':\n        // next observers are meant to be notified about done snapshots\n        // this can be seen as something that is different from how observable work\n        // but with observables `complete` callback is called without any arguments\n        // it's more ergonomic for XState to treat a done snapshot as a \"next\" value\n        // and the completion event as something that is separate,\n        // something that merely follows emitting that done snapshot\n        for (const observer of this.observers) {\n          try {\n            observer.next?.(snapshot);\n          } catch (err) {\n            reportUnhandledError(err);\n          }\n        }\n        this._stopProcedure();\n        this._complete();\n        this._doneEvent = createDoneActorEvent(this.id, this._snapshot.output);\n        if (this._parent) {\n          this.system._relay(this, this._parent, this._doneEvent);\n        }\n        break;\n      case 'error':\n        this._error(this._snapshot.error);\n        break;\n    }\n    this.system._sendInspectionEvent({\n      type: '@xstate.snapshot',\n      actorRef: this,\n      event,\n      snapshot\n    });\n  }\n\n  /**\n   * Subscribe an observer to an actor’s snapshot values.\n   *\n   * @remarks\n   * The observer will receive the actor’s snapshot value when it is emitted.\n   * The observer can be:\n   *\n   * - A plain function that receives the latest snapshot, or\n   * - An observer object whose `.next(snapshot)` method receives the latest\n   *   snapshot\n   *\n   * @example\n   *\n   * ```ts\n   * // Observer as a plain function\n   * const subscription = actor.subscribe((snapshot) => {\n   *   console.log(snapshot);\n   * });\n   * ```\n   *\n   * @example\n   *\n   * ```ts\n   * // Observer as an object\n   * const subscription = actor.subscribe({\n   *   next(snapshot) {\n   *     console.log(snapshot);\n   *   },\n   *   error(err) {\n   *     // ...\n   *   },\n   *   complete() {\n   *     // ...\n   *   }\n   * });\n   * ```\n   *\n   * The return value of `actor.subscribe(observer)` is a subscription object\n   * that has an `.unsubscribe()` method. You can call\n   * `subscription.unsubscribe()` to unsubscribe the observer:\n   *\n   * @example\n   *\n   * ```ts\n   * const subscription = actor.subscribe((snapshot) => {\n   *   // ...\n   * });\n   *\n   * // Unsubscribe the observer\n   * subscription.unsubscribe();\n   * ```\n   *\n   * When the actor is stopped, all of its observers will automatically be\n   * unsubscribed.\n   *\n   * @param observer - Either a plain function that receives the latest\n   *   snapshot, or an observer object whose `.next(snapshot)` method receives\n   *   the latest snapshot\n   */\n\n  subscribe(nextListenerOrObserver, errorListener, completeListener) {\n    const observer = toObserver(nextListenerOrObserver, errorListener, completeListener);\n    if (this._processingStatus !== ProcessingStatus.Stopped) {\n      this.observers.add(observer);\n    } else {\n      switch (this._snapshot.status) {\n        case 'done':\n          try {\n            observer.complete?.();\n          } catch (err) {\n            reportUnhandledError(err);\n          }\n          break;\n        case 'error':\n          {\n            const err = this._snapshot.error;\n            if (!observer.error) {\n              reportUnhandledError(err);\n            } else {\n              try {\n                observer.error(err);\n              } catch (err) {\n                reportUnhandledError(err);\n              }\n            }\n            break;\n          }\n      }\n    }\n    return {\n      unsubscribe: () => {\n        this.observers.delete(observer);\n      }\n    };\n  }\n  on(type, handler) {\n    let listeners = this.eventListeners.get(type);\n    if (!listeners) {\n      listeners = new Set();\n      this.eventListeners.set(type, listeners);\n    }\n    const wrappedHandler = handler.bind(undefined);\n    listeners.add(wrappedHandler);\n    return {\n      unsubscribe: () => {\n        listeners.delete(wrappedHandler);\n      }\n    };\n  }\n\n  /** Starts the Actor from the initial state */\n  start() {\n    if (this._processingStatus === ProcessingStatus.Running) {\n      // Do not restart the service if it is already started\n      return this;\n    }\n    if (this._syncSnapshot) {\n      this.subscribe({\n        next: snapshot => {\n          if (snapshot.status === 'active') {\n            this.system._relay(this, this._parent, {\n              type: `xstate.snapshot.${this.id}`,\n              snapshot\n            });\n          }\n        },\n        error: () => {}\n      });\n    }\n    this.system._register(this.sessionId, this);\n    if (this._systemId) {\n      this.system._set(this._systemId, this);\n    }\n    this._processingStatus = ProcessingStatus.Running;\n\n    // TODO: this isn't correct when rehydrating\n    const initEvent = createInitEvent(this.options.input);\n    this.system._sendInspectionEvent({\n      type: '@xstate.event',\n      sourceRef: this._parent,\n      actorRef: this,\n      event: initEvent\n    });\n    const status = this._snapshot.status;\n    switch (status) {\n      case 'done':\n        // a state machine can be \"done\" upon initialization (it could reach a final state using initial microsteps)\n        // we still need to complete observers, flush deferreds etc\n        this.update(this._snapshot, initEvent);\n        // TODO: rethink cleanup of observers, mailbox, etc\n        return this;\n      case 'error':\n        this._error(this._snapshot.error);\n        return this;\n    }\n    if (!this._parent) {\n      this.system.start();\n    }\n    if (this.logic.start) {\n      try {\n        this.logic.start(this._snapshot, this._actorScope);\n      } catch (err) {\n        this._snapshot = {\n          ...this._snapshot,\n          status: 'error',\n          error: err\n        };\n        this._error(err);\n        return this;\n      }\n    }\n\n    // TODO: this notifies all subscribers but usually this is redundant\n    // there is no real change happening here\n    // we need to rethink if this needs to be refactored\n    this.update(this._snapshot, initEvent);\n    if (this.options.devTools) {\n      this.attachDevTools();\n    }\n    this.mailbox.start();\n    return this;\n  }\n  _process(event) {\n    let nextState;\n    let caughtError;\n    try {\n      nextState = this.logic.transition(this._snapshot, event, this._actorScope);\n    } catch (err) {\n      // we wrap it in a box so we can rethrow it later even if falsy value gets caught here\n      caughtError = {\n        err\n      };\n    }\n    if (caughtError) {\n      const {\n        err\n      } = caughtError;\n      this._snapshot = {\n        ...this._snapshot,\n        status: 'error',\n        error: err\n      };\n      this._error(err);\n      return;\n    }\n    this.update(nextState, event);\n    if (event.type === XSTATE_STOP) {\n      this._stopProcedure();\n      this._complete();\n    }\n  }\n  _stop() {\n    if (this._processingStatus === ProcessingStatus.Stopped) {\n      return this;\n    }\n    this.mailbox.clear();\n    if (this._processingStatus === ProcessingStatus.NotStarted) {\n      this._processingStatus = ProcessingStatus.Stopped;\n      return this;\n    }\n    this.mailbox.enqueue({\n      type: XSTATE_STOP\n    });\n    return this;\n  }\n\n  /** Stops the Actor and unsubscribe all listeners. */\n  stop() {\n    if (this._parent) {\n      throw new Error('A non-root actor cannot be stopped directly.');\n    }\n    return this._stop();\n  }\n  _complete() {\n    for (const observer of this.observers) {\n      try {\n        observer.complete?.();\n      } catch (err) {\n        reportUnhandledError(err);\n      }\n    }\n    this.observers.clear();\n  }\n  _reportError(err) {\n    if (!this.observers.size) {\n      if (!this._parent) {\n        reportUnhandledError(err);\n      }\n      return;\n    }\n    let reportError = false;\n    for (const observer of this.observers) {\n      const errorListener = observer.error;\n      reportError ||= !errorListener;\n      try {\n        errorListener?.(err);\n      } catch (err2) {\n        reportUnhandledError(err2);\n      }\n    }\n    this.observers.clear();\n    if (reportError) {\n      reportUnhandledError(err);\n    }\n  }\n  _error(err) {\n    this._stopProcedure();\n    this._reportError(err);\n    if (this._parent) {\n      this.system._relay(this, this._parent, createErrorActorEvent(this.id, err));\n    }\n  }\n  // TODO: atm children don't belong entirely to the actor so\n  // in a way - it's not even super aware of them\n  // so we can't stop them from here but we really should!\n  // right now, they are being stopped within the machine's transition\n  // but that could throw and leave us with \"orphaned\" active actors\n  _stopProcedure() {\n    if (this._processingStatus !== ProcessingStatus.Running) {\n      // Actor already stopped; do nothing\n      return this;\n    }\n\n    // Cancel all delayed events\n    this.system.scheduler.cancelAll(this);\n\n    // TODO: mailbox.reset\n    this.mailbox.clear();\n    // TODO: after `stop` we must prepare ourselves for receiving events again\n    // events sent *after* stop signal must be queued\n    // it seems like this should be the common behavior for all of our consumers\n    // so perhaps this should be unified somehow for all of them\n    this.mailbox = new Mailbox(this._process.bind(this));\n    this._processingStatus = ProcessingStatus.Stopped;\n    this.system._unregister(this);\n    return this;\n  }\n\n  /** @internal */\n  _send(event) {\n    if (this._processingStatus === ProcessingStatus.Stopped) {\n      return;\n    }\n    this.mailbox.enqueue(event);\n  }\n\n  /**\n   * Sends an event to the running Actor to trigger a transition.\n   *\n   * @param event The event to send\n   */\n  send(event) {\n    this.system._relay(undefined, this, event);\n  }\n  attachDevTools() {\n    const {\n      devTools\n    } = this.options;\n    if (devTools) {\n      const resolvedDevToolsAdapter = typeof devTools === 'function' ? devTools : devToolsAdapter;\n      resolvedDevToolsAdapter(this);\n    }\n  }\n  toJSON() {\n    return {\n      xstate$$type: $$ACTOR_TYPE,\n      id: this.id\n    };\n  }\n\n  /**\n   * Obtain the internal state of the actor, which can be persisted.\n   *\n   * @remarks\n   * The internal state can be persisted from any actor, not only machines.\n   *\n   * Note that the persisted state is not the same as the snapshot from\n   * {@link Actor.getSnapshot}. Persisted state represents the internal state of\n   * the actor, while snapshots represent the actor's last emitted value.\n   *\n   * Can be restored with {@link ActorOptions.state}\n   * @see https://stately.ai/docs/persistence\n   */\n\n  getPersistedSnapshot(options) {\n    return this.logic.getPersistedSnapshot(this._snapshot, options);\n  }\n  [symbolObservable]() {\n    return this;\n  }\n\n  /**\n   * Read an actor’s snapshot synchronously.\n   *\n   * @remarks\n   * The snapshot represent an actor's last emitted value.\n   *\n   * When an actor receives an event, its internal state may change. An actor\n   * may emit a snapshot when a state transition occurs.\n   *\n   * Note that some actors, such as callback actors generated with\n   * `fromCallback`, will not emit snapshots.\n   * @see {@link Actor.subscribe} to subscribe to an actor’s snapshot values.\n   * @see {@link Actor.getPersistedSnapshot} to persist the internal state of an actor (which is more than just a snapshot).\n   */\n  getSnapshot() {\n    return this._snapshot;\n  }\n}\n/**\n * Creates a new actor instance for the given actor logic with the provided\n * options, if any.\n *\n * @remarks\n * When you create an actor from actor logic via `createActor(logic)`, you\n * implicitly create an actor system where the created actor is the root actor.\n * Any actors spawned from this root actor and its descendants are part of that\n * actor system.\n * @example\n *\n * ```ts\n * import { createActor } from 'xstate';\n * import { someActorLogic } from './someActorLogic.ts';\n *\n * // Creating the actor, which implicitly creates an actor system with itself as the root actor\n * const actor = createActor(someActorLogic);\n *\n * actor.subscribe((snapshot) => {\n *   console.log(snapshot);\n * });\n *\n * // Actors must be started by calling `actor.start()`, which will also start the actor system.\n * actor.start();\n *\n * // Actors can receive events\n * actor.send({ type: 'someEvent' });\n *\n * // You can stop root actors by calling `actor.stop()`, which will also stop the actor system and all actors in that system.\n * actor.stop();\n * ```\n *\n * @param logic - The actor logic to create an actor from. For a state machine\n *   actor logic creator, see {@link createMachine}. Other actor logic creators\n *   include {@link fromCallback}, {@link fromEventObservable},\n *   {@link fromObservable}, {@link fromPromise}, and {@link fromTransition}.\n * @param options - Actor options\n */\nfunction createActor(logic, ...[options]) {\n  return new Actor(logic, options);\n}\n\n/**\n * Creates a new Interpreter instance for the given machine with the provided\n * options, if any.\n *\n * @deprecated Use `createActor` instead\n * @alias\n */\nconst interpret = createActor;\n\n/**\n * @deprecated Use `Actor` instead.\n * @alias\n */\n\nfunction resolveCancel(_, snapshot, actionArgs, actionParams, {\n  sendId\n}) {\n  const resolvedSendId = typeof sendId === 'function' ? sendId(actionArgs, actionParams) : sendId;\n  return [snapshot, resolvedSendId];\n}\nfunction executeCancel(actorScope, resolvedSendId) {\n  actorScope.defer(() => {\n    actorScope.system.scheduler.cancel(actorScope.self, resolvedSendId);\n  });\n}\n/**\n * Cancels a delayed `sendTo(...)` action that is waiting to be executed. The\n * canceled `sendTo(...)` action will not send its event or execute, unless the\n * `delay` has already elapsed before `cancel(...)` is called.\n *\n * @example\n *\n * ```ts\n * import { createMachine, sendTo, cancel } from 'xstate';\n *\n * const machine = createMachine({\n *   // ...\n *   on: {\n *     sendEvent: {\n *       actions: sendTo(\n *         'some-actor',\n *         { type: 'someEvent' },\n *         {\n *           id: 'some-id',\n *           delay: 1000\n *         }\n *       )\n *     },\n *     cancelEvent: {\n *       actions: cancel('some-id')\n *     }\n *   }\n * });\n * ```\n *\n * @param sendId The `id` of the `sendTo(...)` action to cancel.\n */\nfunction cancel(sendId) {\n  function cancel(args, params) {\n  }\n  cancel.type = 'xstate.cancel';\n  cancel.sendId = sendId;\n  cancel.resolve = resolveCancel;\n  cancel.execute = executeCancel;\n  return cancel;\n}\n\nfunction resolveSpawn(actorScope, snapshot, actionArgs, _actionParams, {\n  id,\n  systemId,\n  src,\n  input,\n  syncSnapshot\n}) {\n  const logic = typeof src === 'string' ? resolveReferencedActor(snapshot.machine, src) : src;\n  const resolvedId = typeof id === 'function' ? id(actionArgs) : id;\n  let actorRef;\n  if (logic) {\n    actorRef = createActor(logic, {\n      id: resolvedId,\n      src,\n      parent: actorScope.self,\n      syncSnapshot,\n      systemId,\n      input: typeof input === 'function' ? input({\n        context: snapshot.context,\n        event: actionArgs.event,\n        self: actorScope.self\n      }) : input\n    });\n  }\n  return [cloneMachineSnapshot(snapshot, {\n    children: {\n      ...snapshot.children,\n      [resolvedId]: actorRef\n    }\n  }), {\n    id,\n    actorRef\n  }];\n}\nfunction executeSpawn(actorScope, {\n  id,\n  actorRef\n}) {\n  if (!actorRef) {\n    return;\n  }\n  actorScope.defer(() => {\n    if (actorRef._processingStatus === ProcessingStatus.Stopped) {\n      return;\n    }\n    actorRef.start();\n  });\n}\nfunction spawnChild(...[src, {\n  id,\n  systemId,\n  input,\n  syncSnapshot = false\n} = {}]) {\n  function spawnChild(args, params) {\n  }\n  spawnChild.type = 'snapshot.spawnChild';\n  spawnChild.id = id;\n  spawnChild.systemId = systemId;\n  spawnChild.src = src;\n  spawnChild.input = input;\n  spawnChild.syncSnapshot = syncSnapshot;\n  spawnChild.resolve = resolveSpawn;\n  spawnChild.execute = executeSpawn;\n  return spawnChild;\n}\n\nfunction resolveStop(_, snapshot, args, actionParams, {\n  actorRef\n}) {\n  const actorRefOrString = typeof actorRef === 'function' ? actorRef(args, actionParams) : actorRef;\n  const resolvedActorRef = typeof actorRefOrString === 'string' ? snapshot.children[actorRefOrString] : actorRefOrString;\n  let children = snapshot.children;\n  if (resolvedActorRef) {\n    children = {\n      ...children\n    };\n    delete children[resolvedActorRef.id];\n  }\n  return [cloneMachineSnapshot(snapshot, {\n    children\n  }), resolvedActorRef];\n}\nfunction executeStop(actorScope, actorRef) {\n  if (!actorRef) {\n    return;\n  }\n\n  // we need to eagerly unregister it here so a new actor with the same systemId can be registered immediately\n  // since we defer actual stopping of the actor but we don't defer actor creations (and we can't do that)\n  // this could throw on `systemId` collision, for example, when dealing with reentering transitions\n  actorScope.system._unregister(actorRef);\n\n  // this allows us to prevent an actor from being started if it gets stopped within the same macrostep\n  // this can happen, for example, when the invoking state is being exited immediately by an always transition\n  if (actorRef._processingStatus !== ProcessingStatus.Running) {\n    actorScope.stopChild(actorRef);\n    return;\n  }\n  // stopping a child enqueues a stop event in the child actor's mailbox\n  // we need for all of the already enqueued events to be processed before we stop the child\n  // the parent itself might want to send some events to a child (for example from exit actions on the invoking state)\n  // and we don't want to ignore those events\n  actorScope.defer(() => {\n    actorScope.stopChild(actorRef);\n  });\n}\n/**\n * Stops a child actor.\n *\n * @param actorRef The actor to stop.\n */\nfunction stopChild(actorRef) {\n  function stop(args, params) {\n  }\n  stop.type = 'xstate.stopChild';\n  stop.actorRef = actorRef;\n  stop.resolve = resolveStop;\n  stop.execute = executeStop;\n  return stop;\n}\n\n/**\n * Stops a child actor.\n *\n * @deprecated Use `stopChild(...)` instead\n * @alias\n */\nconst stop = stopChild;\n\nfunction checkStateIn(snapshot, _, {\n  stateValue\n}) {\n  if (typeof stateValue === 'string' && isStateId(stateValue)) {\n    const target = snapshot.machine.getStateNodeById(stateValue);\n    return snapshot._nodes.some(sn => sn === target);\n  }\n  return snapshot.matches(stateValue);\n}\nfunction stateIn(stateValue) {\n  function stateIn(args, params) {\n    return false;\n  }\n  stateIn.check = checkStateIn;\n  stateIn.stateValue = stateValue;\n  return stateIn;\n}\nfunction checkNot(snapshot, {\n  context,\n  event\n}, {\n  guards\n}) {\n  return !evaluateGuard(guards[0], context, event, snapshot);\n}\n\n/**\n * Higher-order guard that evaluates to `true` if the `guard` passed to it\n * evaluates to `false`.\n *\n * @category Guards\n * @example\n *\n * ```ts\n * import { setup, not } from 'xstate';\n *\n * const machine = setup({\n *   guards: {\n *     someNamedGuard: () => false\n *   }\n * }).createMachine({\n *   on: {\n *     someEvent: {\n *       guard: not('someNamedGuard'),\n *       actions: () => {\n *         // will be executed if guard in `not(...)`\n *         // evaluates to `false`\n *       }\n *     }\n *   }\n * });\n * ```\n *\n * @returns A guard\n */\nfunction not(guard) {\n  function not(args, params) {\n    return false;\n  }\n  not.check = checkNot;\n  not.guards = [guard];\n  return not;\n}\nfunction checkAnd(snapshot, {\n  context,\n  event\n}, {\n  guards\n}) {\n  return guards.every(guard => evaluateGuard(guard, context, event, snapshot));\n}\n\n/**\n * Higher-order guard that evaluates to `true` if all `guards` passed to it\n * evaluate to `true`.\n *\n * @category Guards\n * @example\n *\n * ```ts\n * import { setup, and } from 'xstate';\n *\n * const machine = setup({\n *   guards: {\n *     someNamedGuard: () => true\n *   }\n * }).createMachine({\n *   on: {\n *     someEvent: {\n *       guard: and([({ context }) => context.value > 0, 'someNamedGuard']),\n *       actions: () => {\n *         // will be executed if all guards in `and(...)`\n *         // evaluate to true\n *       }\n *     }\n *   }\n * });\n * ```\n *\n * @returns A guard action object\n */\nfunction and(guards) {\n  function and(args, params) {\n    return false;\n  }\n  and.check = checkAnd;\n  and.guards = guards;\n  return and;\n}\nfunction checkOr(snapshot, {\n  context,\n  event\n}, {\n  guards\n}) {\n  return guards.some(guard => evaluateGuard(guard, context, event, snapshot));\n}\n\n/**\n * Higher-order guard that evaluates to `true` if any of the `guards` passed to\n * it evaluate to `true`.\n *\n * @category Guards\n * @example\n *\n * ```ts\n * import { setup, or } from 'xstate';\n *\n * const machine = setup({\n *   guards: {\n *     someNamedGuard: () => true\n *   }\n * }).createMachine({\n *   on: {\n *     someEvent: {\n *       guard: or([({ context }) => context.value > 0, 'someNamedGuard']),\n *       actions: () => {\n *         // will be executed if any of the guards in `or(...)`\n *         // evaluate to true\n *       }\n *     }\n *   }\n * });\n * ```\n *\n * @returns A guard action object\n */\nfunction or(guards) {\n  function or(args, params) {\n    return false;\n  }\n  or.check = checkOr;\n  or.guards = guards;\n  return or;\n}\n\n// TODO: throw on cycles (depth check should be enough)\nfunction evaluateGuard(guard, context, event, snapshot) {\n  const {\n    machine\n  } = snapshot;\n  const isInline = typeof guard === 'function';\n  const resolved = isInline ? guard : machine.implementations.guards[typeof guard === 'string' ? guard : guard.type];\n  if (!isInline && !resolved) {\n    throw new Error(`Guard '${typeof guard === 'string' ? guard : guard.type}' is not implemented.'.`);\n  }\n  if (typeof resolved !== 'function') {\n    return evaluateGuard(resolved, context, event, snapshot);\n  }\n  const guardArgs = {\n    context,\n    event\n  };\n  const guardParams = isInline || typeof guard === 'string' ? undefined : 'params' in guard ? typeof guard.params === 'function' ? guard.params({\n    context,\n    event\n  }) : guard.params : undefined;\n  if (!('check' in resolved)) {\n    // the existing type of `.guards` assumes non-nullable `TExpressionGuard`\n    // inline guards expect `TExpressionGuard` to be set to `undefined`\n    // it's fine to cast this here, our logic makes sure that we call those 2 \"variants\" correctly\n    return resolved(guardArgs, guardParams);\n  }\n  const builtinGuard = resolved;\n  return builtinGuard.check(snapshot, guardArgs, resolved // this holds all params\n  );\n}\n\nconst isAtomicStateNode = stateNode => stateNode.type === 'atomic' || stateNode.type === 'final';\nfunction getChildren(stateNode) {\n  return Object.values(stateNode.states).filter(sn => sn.type !== 'history');\n}\nfunction getProperAncestors(stateNode, toStateNode) {\n  const ancestors = [];\n  if (toStateNode === stateNode) {\n    return ancestors;\n  }\n\n  // add all ancestors\n  let m = stateNode.parent;\n  while (m && m !== toStateNode) {\n    ancestors.push(m);\n    m = m.parent;\n  }\n  return ancestors;\n}\nfunction getAllStateNodes(stateNodes) {\n  const nodeSet = new Set(stateNodes);\n  const adjList = getAdjList(nodeSet);\n\n  // add descendants\n  for (const s of nodeSet) {\n    // if previously active, add existing child nodes\n    if (s.type === 'compound' && (!adjList.get(s) || !adjList.get(s).length)) {\n      getInitialStateNodesWithTheirAncestors(s).forEach(sn => nodeSet.add(sn));\n    } else {\n      if (s.type === 'parallel') {\n        for (const child of getChildren(s)) {\n          if (child.type === 'history') {\n            continue;\n          }\n          if (!nodeSet.has(child)) {\n            const initialStates = getInitialStateNodesWithTheirAncestors(child);\n            for (const initialStateNode of initialStates) {\n              nodeSet.add(initialStateNode);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  // add all ancestors\n  for (const s of nodeSet) {\n    let m = s.parent;\n    while (m) {\n      nodeSet.add(m);\n      m = m.parent;\n    }\n  }\n  return nodeSet;\n}\nfunction getValueFromAdj(baseNode, adjList) {\n  const childStateNodes = adjList.get(baseNode);\n  if (!childStateNodes) {\n    return {}; // todo: fix?\n  }\n  if (baseNode.type === 'compound') {\n    const childStateNode = childStateNodes[0];\n    if (childStateNode) {\n      if (isAtomicStateNode(childStateNode)) {\n        return childStateNode.key;\n      }\n    } else {\n      return {};\n    }\n  }\n  const stateValue = {};\n  for (const childStateNode of childStateNodes) {\n    stateValue[childStateNode.key] = getValueFromAdj(childStateNode, adjList);\n  }\n  return stateValue;\n}\nfunction getAdjList(stateNodes) {\n  const adjList = new Map();\n  for (const s of stateNodes) {\n    if (!adjList.has(s)) {\n      adjList.set(s, []);\n    }\n    if (s.parent) {\n      if (!adjList.has(s.parent)) {\n        adjList.set(s.parent, []);\n      }\n      adjList.get(s.parent).push(s);\n    }\n  }\n  return adjList;\n}\nfunction getStateValue(rootNode, stateNodes) {\n  const config = getAllStateNodes(stateNodes);\n  return getValueFromAdj(rootNode, getAdjList(config));\n}\nfunction isInFinalState(stateNodeSet, stateNode) {\n  if (stateNode.type === 'compound') {\n    return getChildren(stateNode).some(s => s.type === 'final' && stateNodeSet.has(s));\n  }\n  if (stateNode.type === 'parallel') {\n    return getChildren(stateNode).every(sn => isInFinalState(stateNodeSet, sn));\n  }\n  return stateNode.type === 'final';\n}\nconst isStateId = str => str[0] === STATE_IDENTIFIER;\nfunction getCandidates(stateNode, receivedEventType) {\n  const candidates = stateNode.transitions.get(receivedEventType) || [...stateNode.transitions.keys()].filter(eventDescriptor => {\n    // check if transition is a wildcard transition,\n    // which matches any non-transient events\n    if (eventDescriptor === WILDCARD) {\n      return true;\n    }\n    if (!eventDescriptor.endsWith('.*')) {\n      return false;\n    }\n    const partialEventTokens = eventDescriptor.split('.');\n    const eventTokens = receivedEventType.split('.');\n    for (let tokenIndex = 0; tokenIndex < partialEventTokens.length; tokenIndex++) {\n      const partialEventToken = partialEventTokens[tokenIndex];\n      const eventToken = eventTokens[tokenIndex];\n      if (partialEventToken === '*') {\n        const isLastToken = tokenIndex === partialEventTokens.length - 1;\n        return isLastToken;\n      }\n      if (partialEventToken !== eventToken) {\n        return false;\n      }\n    }\n    return true;\n  }).sort((a, b) => b.length - a.length).flatMap(key => stateNode.transitions.get(key));\n  return candidates;\n}\n\n/** All delayed transitions from the config. */\nfunction getDelayedTransitions(stateNode) {\n  const afterConfig = stateNode.config.after;\n  if (!afterConfig) {\n    return [];\n  }\n  const mutateEntryExit = (delay, i) => {\n    const afterEvent = createAfterEvent(delay, stateNode.id);\n    const eventType = afterEvent.type;\n    stateNode.entry.push(raise(afterEvent, {\n      id: eventType,\n      delay\n    }));\n    stateNode.exit.push(cancel(eventType));\n    return eventType;\n  };\n  const delayedTransitions = Object.keys(afterConfig).flatMap((delay, i) => {\n    const configTransition = afterConfig[delay];\n    const resolvedTransition = typeof configTransition === 'string' ? {\n      target: configTransition\n    } : configTransition;\n    const resolvedDelay = Number.isNaN(+delay) ? delay : +delay;\n    const eventType = mutateEntryExit(resolvedDelay);\n    return toArray(resolvedTransition).map(transition => ({\n      ...transition,\n      event: eventType,\n      delay: resolvedDelay\n    }));\n  });\n  return delayedTransitions.map(delayedTransition => {\n    const {\n      delay\n    } = delayedTransition;\n    return {\n      ...formatTransition(stateNode, delayedTransition.event, delayedTransition),\n      delay\n    };\n  });\n}\nfunction formatTransition(stateNode, descriptor, transitionConfig) {\n  const normalizedTarget = normalizeTarget(transitionConfig.target);\n  const reenter = transitionConfig.reenter ?? false;\n  const target = resolveTarget(stateNode, normalizedTarget);\n  const transition = {\n    ...transitionConfig,\n    actions: toArray(transitionConfig.actions),\n    guard: transitionConfig.guard,\n    target,\n    source: stateNode,\n    reenter,\n    eventType: descriptor,\n    toJSON: () => ({\n      ...transition,\n      source: `#${stateNode.id}`,\n      target: target ? target.map(t => `#${t.id}`) : undefined\n    })\n  };\n  return transition;\n}\nfunction formatTransitions(stateNode) {\n  const transitions = new Map();\n  if (stateNode.config.on) {\n    for (const descriptor of Object.keys(stateNode.config.on)) {\n      if (descriptor === NULL_EVENT) {\n        throw new Error('Null events (\"\") cannot be specified as a transition key. Use `always: { ... }` instead.');\n      }\n      const transitionsConfig = stateNode.config.on[descriptor];\n      transitions.set(descriptor, toTransitionConfigArray(transitionsConfig).map(t => formatTransition(stateNode, descriptor, t)));\n    }\n  }\n  if (stateNode.config.onDone) {\n    const descriptor = `xstate.done.state.${stateNode.id}`;\n    transitions.set(descriptor, toTransitionConfigArray(stateNode.config.onDone).map(t => formatTransition(stateNode, descriptor, t)));\n  }\n  for (const invokeDef of stateNode.invoke) {\n    if (invokeDef.onDone) {\n      const descriptor = `xstate.done.actor.${invokeDef.id}`;\n      transitions.set(descriptor, toTransitionConfigArray(invokeDef.onDone).map(t => formatTransition(stateNode, descriptor, t)));\n    }\n    if (invokeDef.onError) {\n      const descriptor = `xstate.error.actor.${invokeDef.id}`;\n      transitions.set(descriptor, toTransitionConfigArray(invokeDef.onError).map(t => formatTransition(stateNode, descriptor, t)));\n    }\n    if (invokeDef.onSnapshot) {\n      const descriptor = `xstate.snapshot.${invokeDef.id}`;\n      transitions.set(descriptor, toTransitionConfigArray(invokeDef.onSnapshot).map(t => formatTransition(stateNode, descriptor, t)));\n    }\n  }\n  for (const delayedTransition of stateNode.after) {\n    let existing = transitions.get(delayedTransition.eventType);\n    if (!existing) {\n      existing = [];\n      transitions.set(delayedTransition.eventType, existing);\n    }\n    existing.push(delayedTransition);\n  }\n  return transitions;\n}\nfunction formatInitialTransition(stateNode, _target) {\n  const resolvedTarget = typeof _target === 'string' ? stateNode.states[_target] : _target ? stateNode.states[_target.target] : undefined;\n  if (!resolvedTarget && _target) {\n    throw new Error(`Initial state node \"${_target}\" not found on parent state node #${stateNode.id}`);\n  }\n  const transition = {\n    source: stateNode,\n    actions: !_target || typeof _target === 'string' ? [] : toArray(_target.actions),\n    eventType: null,\n    reenter: false,\n    target: resolvedTarget ? [resolvedTarget] : [],\n    toJSON: () => ({\n      ...transition,\n      source: `#${stateNode.id}`,\n      target: resolvedTarget ? [`#${resolvedTarget.id}`] : []\n    })\n  };\n  return transition;\n}\nfunction resolveTarget(stateNode, targets) {\n  if (targets === undefined) {\n    // an undefined target signals that the state node should not transition from that state when receiving that event\n    return undefined;\n  }\n  return targets.map(target => {\n    if (typeof target !== 'string') {\n      return target;\n    }\n    if (isStateId(target)) {\n      return stateNode.machine.getStateNodeById(target);\n    }\n    const isInternalTarget = target[0] === STATE_DELIMITER;\n    // If internal target is defined on machine,\n    // do not include machine key on target\n    if (isInternalTarget && !stateNode.parent) {\n      return getStateNodeByPath(stateNode, target.slice(1));\n    }\n    const resolvedTarget = isInternalTarget ? stateNode.key + target : target;\n    if (stateNode.parent) {\n      try {\n        const targetStateNode = getStateNodeByPath(stateNode.parent, resolvedTarget);\n        return targetStateNode;\n      } catch (err) {\n        throw new Error(`Invalid transition definition for state node '${stateNode.id}':\\n${err.message}`);\n      }\n    } else {\n      throw new Error(`Invalid target: \"${target}\" is not a valid target from the root node. Did you mean \".${target}\"?`);\n    }\n  });\n}\nfunction resolveHistoryDefaultTransition(stateNode) {\n  const normalizedTarget = normalizeTarget(stateNode.config.target);\n  if (!normalizedTarget) {\n    return stateNode.parent.initial;\n  }\n  return {\n    target: normalizedTarget.map(t => typeof t === 'string' ? getStateNodeByPath(stateNode.parent, t) : t)\n  };\n}\nfunction isHistoryNode(stateNode) {\n  return stateNode.type === 'history';\n}\nfunction getInitialStateNodesWithTheirAncestors(stateNode) {\n  const states = getInitialStateNodes(stateNode);\n  for (const initialState of states) {\n    for (const ancestor of getProperAncestors(initialState, stateNode)) {\n      states.add(ancestor);\n    }\n  }\n  return states;\n}\nfunction getInitialStateNodes(stateNode) {\n  const set = new Set();\n  function iter(descStateNode) {\n    if (set.has(descStateNode)) {\n      return;\n    }\n    set.add(descStateNode);\n    if (descStateNode.type === 'compound') {\n      iter(descStateNode.initial.target[0]);\n    } else if (descStateNode.type === 'parallel') {\n      for (const child of getChildren(descStateNode)) {\n        iter(child);\n      }\n    }\n  }\n  iter(stateNode);\n  return set;\n}\n/** Returns the child state node from its relative `stateKey`, or throws. */\nfunction getStateNode(stateNode, stateKey) {\n  if (isStateId(stateKey)) {\n    return stateNode.machine.getStateNodeById(stateKey);\n  }\n  if (!stateNode.states) {\n    throw new Error(`Unable to retrieve child state '${stateKey}' from '${stateNode.id}'; no child states exist.`);\n  }\n  const result = stateNode.states[stateKey];\n  if (!result) {\n    throw new Error(`Child state '${stateKey}' does not exist on '${stateNode.id}'`);\n  }\n  return result;\n}\n\n/**\n * Returns the relative state node from the given `statePath`, or throws.\n *\n * @param statePath The string or string array relative path to the state node.\n */\nfunction getStateNodeByPath(stateNode, statePath) {\n  if (typeof statePath === 'string' && isStateId(statePath)) {\n    try {\n      return stateNode.machine.getStateNodeById(statePath);\n    } catch (e) {\n      // try individual paths\n      // throw e;\n    }\n  }\n  const arrayStatePath = toStatePath(statePath).slice();\n  let currentStateNode = stateNode;\n  while (arrayStatePath.length) {\n    const key = arrayStatePath.shift();\n    if (!key.length) {\n      break;\n    }\n    currentStateNode = getStateNode(currentStateNode, key);\n  }\n  return currentStateNode;\n}\n\n/**\n * Returns the state nodes represented by the current state value.\n *\n * @param stateValue The state value or State instance\n */\nfunction getStateNodes(stateNode, stateValue) {\n  if (typeof stateValue === 'string') {\n    const childStateNode = stateNode.states[stateValue];\n    if (!childStateNode) {\n      throw new Error(`State '${stateValue}' does not exist on '${stateNode.id}'`);\n    }\n    return [stateNode, childStateNode];\n  }\n  const childStateKeys = Object.keys(stateValue);\n  const childStateNodes = childStateKeys.map(subStateKey => getStateNode(stateNode, subStateKey)).filter(Boolean);\n  return [stateNode.machine.root, stateNode].concat(childStateNodes, childStateKeys.reduce((allSubStateNodes, subStateKey) => {\n    const subStateNode = getStateNode(stateNode, subStateKey);\n    if (!subStateNode) {\n      return allSubStateNodes;\n    }\n    const subStateNodes = getStateNodes(subStateNode, stateValue[subStateKey]);\n    return allSubStateNodes.concat(subStateNodes);\n  }, []));\n}\nfunction transitionAtomicNode(stateNode, stateValue, snapshot, event) {\n  const childStateNode = getStateNode(stateNode, stateValue);\n  const next = childStateNode.next(snapshot, event);\n  if (!next || !next.length) {\n    return stateNode.next(snapshot, event);\n  }\n  return next;\n}\nfunction transitionCompoundNode(stateNode, stateValue, snapshot, event) {\n  const subStateKeys = Object.keys(stateValue);\n  const childStateNode = getStateNode(stateNode, subStateKeys[0]);\n  const next = transitionNode(childStateNode, stateValue[subStateKeys[0]], snapshot, event);\n  if (!next || !next.length) {\n    return stateNode.next(snapshot, event);\n  }\n  return next;\n}\nfunction transitionParallelNode(stateNode, stateValue, snapshot, event) {\n  const allInnerTransitions = [];\n  for (const subStateKey of Object.keys(stateValue)) {\n    const subStateValue = stateValue[subStateKey];\n    if (!subStateValue) {\n      continue;\n    }\n    const subStateNode = getStateNode(stateNode, subStateKey);\n    const innerTransitions = transitionNode(subStateNode, subStateValue, snapshot, event);\n    if (innerTransitions) {\n      allInnerTransitions.push(...innerTransitions);\n    }\n  }\n  if (!allInnerTransitions.length) {\n    return stateNode.next(snapshot, event);\n  }\n  return allInnerTransitions;\n}\nfunction transitionNode(stateNode, stateValue, snapshot, event) {\n  // leaf node\n  if (typeof stateValue === 'string') {\n    return transitionAtomicNode(stateNode, stateValue, snapshot, event);\n  }\n\n  // compound node\n  if (Object.keys(stateValue).length === 1) {\n    return transitionCompoundNode(stateNode, stateValue, snapshot, event);\n  }\n\n  // parallel node\n  return transitionParallelNode(stateNode, stateValue, snapshot, event);\n}\nfunction getHistoryNodes(stateNode) {\n  return Object.keys(stateNode.states).map(key => stateNode.states[key]).filter(sn => sn.type === 'history');\n}\nfunction isDescendant(childStateNode, parentStateNode) {\n  let marker = childStateNode;\n  while (marker.parent && marker.parent !== parentStateNode) {\n    marker = marker.parent;\n  }\n  return marker.parent === parentStateNode;\n}\nfunction hasIntersection(s1, s2) {\n  const set1 = new Set(s1);\n  const set2 = new Set(s2);\n  for (const item of set1) {\n    if (set2.has(item)) {\n      return true;\n    }\n  }\n  for (const item of set2) {\n    if (set1.has(item)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction removeConflictingTransitions(enabledTransitions, stateNodeSet, historyValue) {\n  const filteredTransitions = new Set();\n  for (const t1 of enabledTransitions) {\n    let t1Preempted = false;\n    const transitionsToRemove = new Set();\n    for (const t2 of filteredTransitions) {\n      if (hasIntersection(computeExitSet([t1], stateNodeSet, historyValue), computeExitSet([t2], stateNodeSet, historyValue))) {\n        if (isDescendant(t1.source, t2.source)) {\n          transitionsToRemove.add(t2);\n        } else {\n          t1Preempted = true;\n          break;\n        }\n      }\n    }\n    if (!t1Preempted) {\n      for (const t3 of transitionsToRemove) {\n        filteredTransitions.delete(t3);\n      }\n      filteredTransitions.add(t1);\n    }\n  }\n  return Array.from(filteredTransitions);\n}\nfunction findLeastCommonAncestor(stateNodes) {\n  const [head, ...tail] = stateNodes;\n  for (const ancestor of getProperAncestors(head, undefined)) {\n    if (tail.every(sn => isDescendant(sn, ancestor))) {\n      return ancestor;\n    }\n  }\n}\nfunction getEffectiveTargetStates(transition, historyValue) {\n  if (!transition.target) {\n    return [];\n  }\n  const targets = new Set();\n  for (const targetNode of transition.target) {\n    if (isHistoryNode(targetNode)) {\n      if (historyValue[targetNode.id]) {\n        for (const node of historyValue[targetNode.id]) {\n          targets.add(node);\n        }\n      } else {\n        for (const node of getEffectiveTargetStates(resolveHistoryDefaultTransition(targetNode), historyValue)) {\n          targets.add(node);\n        }\n      }\n    } else {\n      targets.add(targetNode);\n    }\n  }\n  return [...targets];\n}\nfunction getTransitionDomain(transition, historyValue) {\n  const targetStates = getEffectiveTargetStates(transition, historyValue);\n  if (!targetStates) {\n    return;\n  }\n  if (!transition.reenter && targetStates.every(target => target === transition.source || isDescendant(target, transition.source))) {\n    return transition.source;\n  }\n  const lca = findLeastCommonAncestor(targetStates.concat(transition.source));\n  if (lca) {\n    return lca;\n  }\n\n  // at this point we know that it's a root transition since LCA couldn't be found\n  if (transition.reenter) {\n    return;\n  }\n  return transition.source.machine.root;\n}\nfunction computeExitSet(transitions, stateNodeSet, historyValue) {\n  const statesToExit = new Set();\n  for (const t of transitions) {\n    if (t.target?.length) {\n      const domain = getTransitionDomain(t, historyValue);\n      if (t.reenter && t.source === domain) {\n        statesToExit.add(domain);\n      }\n      for (const stateNode of stateNodeSet) {\n        if (isDescendant(stateNode, domain)) {\n          statesToExit.add(stateNode);\n        }\n      }\n    }\n  }\n  return [...statesToExit];\n}\nfunction areStateNodeCollectionsEqual(prevStateNodes, nextStateNodeSet) {\n  if (prevStateNodes.length !== nextStateNodeSet.size) {\n    return false;\n  }\n  for (const node of prevStateNodes) {\n    if (!nextStateNodeSet.has(node)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/** https://www.w3.org/TR/scxml/#microstepProcedure */\nfunction microstep(transitions, currentSnapshot, actorScope, event, isInitial, internalQueue) {\n  if (!transitions.length) {\n    return currentSnapshot;\n  }\n  const mutStateNodeSet = new Set(currentSnapshot._nodes);\n  let historyValue = currentSnapshot.historyValue;\n  const filteredTransitions = removeConflictingTransitions(transitions, mutStateNodeSet, historyValue);\n  let nextState = currentSnapshot;\n\n  // Exit states\n  if (!isInitial) {\n    [nextState, historyValue] = exitStates(nextState, event, actorScope, filteredTransitions, mutStateNodeSet, historyValue, internalQueue);\n  }\n\n  // Execute transition content\n  nextState = resolveActionsAndContext(nextState, event, actorScope, filteredTransitions.flatMap(t => t.actions), internalQueue);\n\n  // Enter states\n  nextState = enterStates(nextState, event, actorScope, filteredTransitions, mutStateNodeSet, internalQueue, historyValue, isInitial);\n  const nextStateNodes = [...mutStateNodeSet];\n  if (nextState.status === 'done') {\n    nextState = resolveActionsAndContext(nextState, event, actorScope, nextStateNodes.sort((a, b) => b.order - a.order).flatMap(state => state.exit), internalQueue);\n  }\n  try {\n    if (historyValue === currentSnapshot.historyValue && areStateNodeCollectionsEqual(currentSnapshot._nodes, mutStateNodeSet)) {\n      return nextState;\n    }\n    return cloneMachineSnapshot(nextState, {\n      _nodes: nextStateNodes,\n      historyValue\n    });\n  } catch (e) {\n    // TODO: Refactor this once proper error handling is implemented.\n    // See https://github.com/statelyai/rfcs/pull/4\n    throw e;\n  }\n}\nfunction getMachineOutput(snapshot, event, actorScope, rootNode, rootCompletionNode) {\n  if (rootNode.output === undefined) {\n    return;\n  }\n  const doneStateEvent = createDoneStateEvent(rootCompletionNode.id, rootCompletionNode.output !== undefined && rootCompletionNode.parent ? resolveOutput(rootCompletionNode.output, snapshot.context, event, actorScope.self) : undefined);\n  return resolveOutput(rootNode.output, snapshot.context, doneStateEvent, actorScope.self);\n}\nfunction enterStates(currentSnapshot, event, actorScope, filteredTransitions, mutStateNodeSet, internalQueue, historyValue, isInitial) {\n  let nextSnapshot = currentSnapshot;\n  const statesToEnter = new Set();\n  // those are states that were directly targeted or indirectly targeted by the explicit target\n  // in other words, those are states for which initial actions should be executed\n  // when we target `#deep_child` initial actions of its ancestors shouldn't be executed\n  const statesForDefaultEntry = new Set();\n  computeEntrySet(filteredTransitions, historyValue, statesForDefaultEntry, statesToEnter);\n\n  // In the initial state, the root state node is \"entered\".\n  if (isInitial) {\n    statesForDefaultEntry.add(currentSnapshot.machine.root);\n  }\n  const completedNodes = new Set();\n  for (const stateNodeToEnter of [...statesToEnter].sort((a, b) => a.order - b.order)) {\n    mutStateNodeSet.add(stateNodeToEnter);\n    const actions = [];\n\n    // Add entry actions\n    actions.push(...stateNodeToEnter.entry);\n    for (const invokeDef of stateNodeToEnter.invoke) {\n      actions.push(spawnChild(invokeDef.src, {\n        ...invokeDef,\n        syncSnapshot: !!invokeDef.onSnapshot\n      }));\n    }\n    if (statesForDefaultEntry.has(stateNodeToEnter)) {\n      const initialActions = stateNodeToEnter.initial.actions;\n      actions.push(...initialActions);\n    }\n    nextSnapshot = resolveActionsAndContext(nextSnapshot, event, actorScope, actions, internalQueue, stateNodeToEnter.invoke.map(invokeDef => invokeDef.id));\n    if (stateNodeToEnter.type === 'final') {\n      const parent = stateNodeToEnter.parent;\n      let ancestorMarker = parent?.type === 'parallel' ? parent : parent?.parent;\n      let rootCompletionNode = ancestorMarker || stateNodeToEnter;\n      if (parent?.type === 'compound') {\n        internalQueue.push(createDoneStateEvent(parent.id, stateNodeToEnter.output !== undefined ? resolveOutput(stateNodeToEnter.output, nextSnapshot.context, event, actorScope.self) : undefined));\n      }\n      while (ancestorMarker?.type === 'parallel' && !completedNodes.has(ancestorMarker) && isInFinalState(mutStateNodeSet, ancestorMarker)) {\n        completedNodes.add(ancestorMarker);\n        internalQueue.push(createDoneStateEvent(ancestorMarker.id));\n        rootCompletionNode = ancestorMarker;\n        ancestorMarker = ancestorMarker.parent;\n      }\n      if (ancestorMarker) {\n        continue;\n      }\n      nextSnapshot = cloneMachineSnapshot(nextSnapshot, {\n        status: 'done',\n        output: getMachineOutput(nextSnapshot, event, actorScope, nextSnapshot.machine.root, rootCompletionNode)\n      });\n    }\n  }\n  return nextSnapshot;\n}\nfunction computeEntrySet(transitions, historyValue, statesForDefaultEntry, statesToEnter) {\n  for (const t of transitions) {\n    const domain = getTransitionDomain(t, historyValue);\n    for (const s of t.target || []) {\n      if (!isHistoryNode(s) && (\n      // if the target is different than the source then it will *definitely* be entered\n      t.source !== s ||\n      // we know that the domain can't lie within the source\n      // if it's different than the source then it's outside of it and it means that the target has to be entered as well\n      t.source !== domain ||\n      // reentering transitions always enter the target, even if it's the source itself\n      t.reenter)) {\n        statesToEnter.add(s);\n        statesForDefaultEntry.add(s);\n      }\n      addDescendantStatesToEnter(s, historyValue, statesForDefaultEntry, statesToEnter);\n    }\n    const targetStates = getEffectiveTargetStates(t, historyValue);\n    for (const s of targetStates) {\n      const ancestors = getProperAncestors(s, domain);\n      if (domain?.type === 'parallel') {\n        ancestors.push(domain);\n      }\n      addAncestorStatesToEnter(statesToEnter, historyValue, statesForDefaultEntry, ancestors, !t.source.parent && t.reenter ? undefined : domain);\n    }\n  }\n}\nfunction addDescendantStatesToEnter(stateNode, historyValue, statesForDefaultEntry, statesToEnter) {\n  if (isHistoryNode(stateNode)) {\n    if (historyValue[stateNode.id]) {\n      const historyStateNodes = historyValue[stateNode.id];\n      for (const s of historyStateNodes) {\n        statesToEnter.add(s);\n        addDescendantStatesToEnter(s, historyValue, statesForDefaultEntry, statesToEnter);\n      }\n      for (const s of historyStateNodes) {\n        addProperAncestorStatesToEnter(s, stateNode.parent, statesToEnter, historyValue, statesForDefaultEntry);\n      }\n    } else {\n      const historyDefaultTransition = resolveHistoryDefaultTransition(stateNode);\n      for (const s of historyDefaultTransition.target) {\n        statesToEnter.add(s);\n        if (historyDefaultTransition === stateNode.parent?.initial) {\n          statesForDefaultEntry.add(stateNode.parent);\n        }\n        addDescendantStatesToEnter(s, historyValue, statesForDefaultEntry, statesToEnter);\n      }\n      for (const s of historyDefaultTransition.target) {\n        addProperAncestorStatesToEnter(s, stateNode.parent, statesToEnter, historyValue, statesForDefaultEntry);\n      }\n    }\n  } else {\n    if (stateNode.type === 'compound') {\n      const [initialState] = stateNode.initial.target;\n      if (!isHistoryNode(initialState)) {\n        statesToEnter.add(initialState);\n        statesForDefaultEntry.add(initialState);\n      }\n      addDescendantStatesToEnter(initialState, historyValue, statesForDefaultEntry, statesToEnter);\n      addProperAncestorStatesToEnter(initialState, stateNode, statesToEnter, historyValue, statesForDefaultEntry);\n    } else {\n      if (stateNode.type === 'parallel') {\n        for (const child of getChildren(stateNode).filter(sn => !isHistoryNode(sn))) {\n          if (![...statesToEnter].some(s => isDescendant(s, child))) {\n            if (!isHistoryNode(child)) {\n              statesToEnter.add(child);\n              statesForDefaultEntry.add(child);\n            }\n            addDescendantStatesToEnter(child, historyValue, statesForDefaultEntry, statesToEnter);\n          }\n        }\n      }\n    }\n  }\n}\nfunction addAncestorStatesToEnter(statesToEnter, historyValue, statesForDefaultEntry, ancestors, reentrancyDomain) {\n  for (const anc of ancestors) {\n    if (!reentrancyDomain || isDescendant(anc, reentrancyDomain)) {\n      statesToEnter.add(anc);\n    }\n    if (anc.type === 'parallel') {\n      for (const child of getChildren(anc).filter(sn => !isHistoryNode(sn))) {\n        if (![...statesToEnter].some(s => isDescendant(s, child))) {\n          statesToEnter.add(child);\n          addDescendantStatesToEnter(child, historyValue, statesForDefaultEntry, statesToEnter);\n        }\n      }\n    }\n  }\n}\nfunction addProperAncestorStatesToEnter(stateNode, toStateNode, statesToEnter, historyValue, statesForDefaultEntry) {\n  addAncestorStatesToEnter(statesToEnter, historyValue, statesForDefaultEntry, getProperAncestors(stateNode, toStateNode));\n}\nfunction exitStates(currentSnapshot, event, actorScope, transitions, mutStateNodeSet, historyValue, internalQueue) {\n  let nextSnapshot = currentSnapshot;\n  const statesToExit = computeExitSet(transitions, mutStateNodeSet, historyValue);\n  statesToExit.sort((a, b) => b.order - a.order);\n  let changedHistory;\n\n  // From SCXML algorithm: https://www.w3.org/TR/scxml/#exitStates\n  for (const exitStateNode of statesToExit) {\n    for (const historyNode of getHistoryNodes(exitStateNode)) {\n      let predicate;\n      if (historyNode.history === 'deep') {\n        predicate = sn => isAtomicStateNode(sn) && isDescendant(sn, exitStateNode);\n      } else {\n        predicate = sn => {\n          return sn.parent === exitStateNode;\n        };\n      }\n      changedHistory ??= {\n        ...historyValue\n      };\n      changedHistory[historyNode.id] = Array.from(mutStateNodeSet).filter(predicate);\n    }\n  }\n  for (const s of statesToExit) {\n    nextSnapshot = resolveActionsAndContext(nextSnapshot, event, actorScope, [...s.exit, ...s.invoke.map(def => stopChild(def.id))], internalQueue);\n    mutStateNodeSet.delete(s);\n  }\n  return [nextSnapshot, changedHistory || historyValue];\n}\nlet executingCustomAction = false;\nfunction resolveAndExecuteActionsWithContext(currentSnapshot, event, actorScope, actions, extra, retries) {\n  const {\n    machine\n  } = currentSnapshot;\n  let intermediateSnapshot = currentSnapshot;\n  for (const action of actions) {\n    const isInline = typeof action === 'function';\n    const resolvedAction = isInline ? action :\n    // the existing type of `.actions` assumes non-nullable `TExpressionAction`\n    // it's fine to cast this here to get a common type and lack of errors in the rest of the code\n    // our logic below makes sure that we call those 2 \"variants\" correctly\n    machine.implementations.actions[typeof action === 'string' ? action : action.type];\n    if (!resolvedAction) {\n      continue;\n    }\n    const actionArgs = {\n      context: intermediateSnapshot.context,\n      event,\n      self: actorScope.self,\n      system: actorScope.system\n    };\n    const actionParams = isInline || typeof action === 'string' ? undefined : 'params' in action ? typeof action.params === 'function' ? action.params({\n      context: intermediateSnapshot.context,\n      event\n    }) : action.params : undefined;\n    function executeAction() {\n      actorScope.system._sendInspectionEvent({\n        type: '@xstate.action',\n        actorRef: actorScope.self,\n        action: {\n          type: typeof action === 'string' ? action : typeof action === 'object' ? action.type : action.name || '(anonymous)',\n          params: actionParams\n        }\n      });\n      try {\n        executingCustomAction = resolvedAction;\n        resolvedAction(actionArgs, actionParams);\n      } finally {\n        executingCustomAction = false;\n      }\n    }\n    if (!('resolve' in resolvedAction)) {\n      if (actorScope.self._processingStatus === ProcessingStatus.Running) {\n        executeAction();\n      } else {\n        actorScope.defer(() => {\n          executeAction();\n        });\n      }\n      continue;\n    }\n    const builtinAction = resolvedAction;\n    const [nextState, params, actions] = builtinAction.resolve(actorScope, intermediateSnapshot, actionArgs, actionParams, resolvedAction,\n    // this holds all params\n    extra);\n    intermediateSnapshot = nextState;\n    if ('retryResolve' in builtinAction) {\n      retries?.push([builtinAction, params]);\n    }\n    if ('execute' in builtinAction) {\n      if (actorScope.self._processingStatus === ProcessingStatus.Running) {\n        builtinAction.execute(actorScope, params);\n      } else {\n        actorScope.defer(builtinAction.execute.bind(null, actorScope, params));\n      }\n    }\n    if (actions) {\n      intermediateSnapshot = resolveAndExecuteActionsWithContext(intermediateSnapshot, event, actorScope, actions, extra, retries);\n    }\n  }\n  return intermediateSnapshot;\n}\nfunction resolveActionsAndContext(currentSnapshot, event, actorScope, actions, internalQueue, deferredActorIds) {\n  const retries = deferredActorIds ? [] : undefined;\n  const nextState = resolveAndExecuteActionsWithContext(currentSnapshot, event, actorScope, actions, {\n    internalQueue,\n    deferredActorIds\n  }, retries);\n  retries?.forEach(([builtinAction, params]) => {\n    builtinAction.retryResolve(actorScope, nextState, params);\n  });\n  return nextState;\n}\nfunction macrostep(snapshot, event, actorScope, internalQueue = []) {\n  let nextSnapshot = snapshot;\n  const microstates = [];\n  function addMicrostate(microstate, event, transitions) {\n    actorScope.system._sendInspectionEvent({\n      type: '@xstate.microstep',\n      actorRef: actorScope.self,\n      event,\n      snapshot: microstate,\n      _transitions: transitions\n    });\n    microstates.push(microstate);\n  }\n\n  // Handle stop event\n  if (event.type === XSTATE_STOP) {\n    nextSnapshot = cloneMachineSnapshot(stopChildren(nextSnapshot, event, actorScope), {\n      status: 'stopped'\n    });\n    addMicrostate(nextSnapshot, event, []);\n    return {\n      snapshot: nextSnapshot,\n      microstates\n    };\n  }\n  let nextEvent = event;\n\n  // Assume the state is at rest (no raised events)\n  // Determine the next state based on the next microstep\n  if (nextEvent.type !== XSTATE_INIT) {\n    const currentEvent = nextEvent;\n    const isErr = isErrorActorEvent(currentEvent);\n    const transitions = selectTransitions(currentEvent, nextSnapshot);\n    if (isErr && !transitions.length) {\n      // TODO: we should likely only allow transitions selected by very explicit descriptors\n      // `*` shouldn't be matched, likely `xstate.error.*` shouldnt be either\n      // similarly `xstate.error.actor.*` and `xstate.error.actor.todo.*` have to be considered too\n      nextSnapshot = cloneMachineSnapshot(snapshot, {\n        status: 'error',\n        error: currentEvent.error\n      });\n      addMicrostate(nextSnapshot, currentEvent, []);\n      return {\n        snapshot: nextSnapshot,\n        microstates\n      };\n    }\n    nextSnapshot = microstep(transitions, snapshot, actorScope, nextEvent, false,\n    // isInitial\n    internalQueue);\n    addMicrostate(nextSnapshot, currentEvent, transitions);\n  }\n  let shouldSelectEventlessTransitions = true;\n  while (nextSnapshot.status === 'active') {\n    let enabledTransitions = shouldSelectEventlessTransitions ? selectEventlessTransitions(nextSnapshot, nextEvent) : [];\n\n    // eventless transitions should always be selected after selecting *regular* transitions\n    // by assigning `undefined` to `previousState` we ensure that `shouldSelectEventlessTransitions` gets always computed to true in such a case\n    const previousState = enabledTransitions.length ? nextSnapshot : undefined;\n    if (!enabledTransitions.length) {\n      if (!internalQueue.length) {\n        break;\n      }\n      nextEvent = internalQueue.shift();\n      enabledTransitions = selectTransitions(nextEvent, nextSnapshot);\n    }\n    nextSnapshot = microstep(enabledTransitions, nextSnapshot, actorScope, nextEvent, false, internalQueue);\n    shouldSelectEventlessTransitions = nextSnapshot !== previousState;\n    addMicrostate(nextSnapshot, nextEvent, enabledTransitions);\n  }\n  if (nextSnapshot.status !== 'active') {\n    stopChildren(nextSnapshot, nextEvent, actorScope);\n  }\n  return {\n    snapshot: nextSnapshot,\n    microstates\n  };\n}\nfunction stopChildren(nextState, event, actorScope) {\n  return resolveActionsAndContext(nextState, event, actorScope, Object.values(nextState.children).map(child => stopChild(child)), []);\n}\nfunction selectTransitions(event, nextState) {\n  return nextState.machine.getTransitionData(nextState, event);\n}\nfunction selectEventlessTransitions(nextState, event) {\n  const enabledTransitionSet = new Set();\n  const atomicStates = nextState._nodes.filter(isAtomicStateNode);\n  for (const stateNode of atomicStates) {\n    loop: for (const s of [stateNode].concat(getProperAncestors(stateNode, undefined))) {\n      if (!s.always) {\n        continue;\n      }\n      for (const transition of s.always) {\n        if (transition.guard === undefined || evaluateGuard(transition.guard, nextState.context, event, nextState)) {\n          enabledTransitionSet.add(transition);\n          break loop;\n        }\n      }\n    }\n  }\n  return removeConflictingTransitions(Array.from(enabledTransitionSet), new Set(nextState._nodes), nextState.historyValue);\n}\n\n/**\n * Resolves a partial state value with its full representation in the state\n * node's machine.\n *\n * @param stateValue The partial state value to resolve.\n */\nfunction resolveStateValue(rootNode, stateValue) {\n  const allStateNodes = getAllStateNodes(getStateNodes(rootNode, stateValue));\n  return getStateValue(rootNode, [...allStateNodes]);\n}\n\nfunction isMachineSnapshot(value) {\n  return !!value && typeof value === 'object' && 'machine' in value && 'value' in value;\n}\nconst machineSnapshotMatches = function matches(testValue) {\n  return matchesState(testValue, this.value);\n};\nconst machineSnapshotHasTag = function hasTag(tag) {\n  return this.tags.has(tag);\n};\nconst machineSnapshotCan = function can(event) {\n  const transitionData = this.machine.getTransitionData(this, event);\n  return !!transitionData?.length &&\n  // Check that at least one transition is not forbidden\n  transitionData.some(t => t.target !== undefined || t.actions.length);\n};\nconst machineSnapshotToJSON = function toJSON() {\n  const {\n    _nodes: nodes,\n    tags,\n    machine,\n    getMeta,\n    toJSON,\n    can,\n    hasTag,\n    matches,\n    ...jsonValues\n  } = this;\n  return {\n    ...jsonValues,\n    tags: Array.from(tags)\n  };\n};\nconst machineSnapshotGetMeta = function getMeta() {\n  return this._nodes.reduce((acc, stateNode) => {\n    if (stateNode.meta !== undefined) {\n      acc[stateNode.id] = stateNode.meta;\n    }\n    return acc;\n  }, {});\n};\nfunction createMachineSnapshot(config, machine) {\n  return {\n    status: config.status,\n    output: config.output,\n    error: config.error,\n    machine,\n    context: config.context,\n    _nodes: config._nodes,\n    value: getStateValue(machine.root, config._nodes),\n    tags: new Set(config._nodes.flatMap(sn => sn.tags)),\n    children: config.children,\n    historyValue: config.historyValue || {},\n    matches: machineSnapshotMatches,\n    hasTag: machineSnapshotHasTag,\n    can: machineSnapshotCan,\n    getMeta: machineSnapshotGetMeta,\n    toJSON: machineSnapshotToJSON\n  };\n}\nfunction cloneMachineSnapshot(snapshot, config = {}) {\n  return createMachineSnapshot({\n    ...snapshot,\n    ...config\n  }, snapshot.machine);\n}\nfunction getPersistedSnapshot(snapshot, options) {\n  const {\n    _nodes: nodes,\n    tags,\n    machine,\n    children,\n    context,\n    can,\n    hasTag,\n    matches,\n    getMeta,\n    toJSON,\n    ...jsonValues\n  } = snapshot;\n  const childrenJson = {};\n  for (const id in children) {\n    const child = children[id];\n    childrenJson[id] = {\n      snapshot: child.getPersistedSnapshot(options),\n      src: child.src,\n      systemId: child._systemId,\n      syncSnapshot: child._syncSnapshot\n    };\n  }\n  const persisted = {\n    ...jsonValues,\n    context: persistContext(context),\n    children: childrenJson\n  };\n  return persisted;\n}\nfunction persistContext(contextPart) {\n  let copy;\n  for (const key in contextPart) {\n    const value = contextPart[key];\n    if (value && typeof value === 'object') {\n      if ('sessionId' in value && 'send' in value && 'ref' in value) {\n        copy ??= Array.isArray(contextPart) ? contextPart.slice() : {\n          ...contextPart\n        };\n        copy[key] = {\n          xstate$$type: $$ACTOR_TYPE,\n          id: value.id\n        };\n      } else {\n        const result = persistContext(value);\n        if (result !== value) {\n          copy ??= Array.isArray(contextPart) ? contextPart.slice() : {\n            ...contextPart\n          };\n          copy[key] = result;\n        }\n      }\n    }\n  }\n  return copy ?? contextPart;\n}\n\nfunction resolveRaise(_, snapshot, args, actionParams, {\n  event: eventOrExpr,\n  id,\n  delay\n}, {\n  internalQueue\n}) {\n  const delaysMap = snapshot.machine.implementations.delays;\n  if (typeof eventOrExpr === 'string') {\n    throw new Error(`Only event objects may be used with raise; use raise({ type: \"${eventOrExpr}\" }) instead`);\n  }\n  const resolvedEvent = typeof eventOrExpr === 'function' ? eventOrExpr(args, actionParams) : eventOrExpr;\n  let resolvedDelay;\n  if (typeof delay === 'string') {\n    const configDelay = delaysMap && delaysMap[delay];\n    resolvedDelay = typeof configDelay === 'function' ? configDelay(args, actionParams) : configDelay;\n  } else {\n    resolvedDelay = typeof delay === 'function' ? delay(args, actionParams) : delay;\n  }\n  if (typeof resolvedDelay !== 'number') {\n    internalQueue.push(resolvedEvent);\n  }\n  return [snapshot, {\n    event: resolvedEvent,\n    id,\n    delay: resolvedDelay\n  }];\n}\nfunction executeRaise(actorScope, params) {\n  const {\n    event,\n    delay,\n    id\n  } = params;\n  if (typeof delay === 'number') {\n    actorScope.defer(() => {\n      const self = actorScope.self;\n      actorScope.system.scheduler.schedule(self, self, event, delay, id);\n    });\n    return;\n  }\n}\n/**\n * Raises an event. This places the event in the internal event queue, so that\n * the event is immediately consumed by the machine in the current step.\n *\n * @param eventType The event to raise.\n */\nfunction raise(eventOrExpr, options) {\n  function raise(args, params) {\n  }\n  raise.type = 'xstate.raise';\n  raise.event = eventOrExpr;\n  raise.id = options?.id;\n  raise.delay = options?.delay;\n  raise.resolve = resolveRaise;\n  raise.execute = executeRaise;\n  return raise;\n}\n\nexport { $$ACTOR_TYPE as $, createActor as A, Actor as B, interpret as C, and as D, not as E, or as F, stateIn as G, isMachineSnapshot as H, getAllOwnEventDescriptors as I, matchesState as J, pathToStateValue as K, toObserver as L, cancel as M, NULL_EVENT as N, raise as O, spawnChild as P, stop as Q, stopChild as R, STATE_DELIMITER as S, ProcessingStatus as T, cloneMachineSnapshot as U, XSTATE_ERROR as V, createErrorActorEvent as W, XSTATE_STOP as X, toTransitionConfigArray as a, formatTransition as b, createInvokeId as c, formatInitialTransition as d, evaluateGuard as e, formatTransitions as f, getDelayedTransitions as g, getCandidates as h, getAllStateNodes as i, getStateNodes as j, createMachineSnapshot as k, isInFinalState as l, mapValues as m, macrostep as n, transitionNode as o, resolveActionsAndContext as p, createInitEvent as q, resolveStateValue as r, microstep as s, toArray as t, getInitialStateNodes as u, toStatePath as v, isStateId as w, getStateNodeByPath as x, getPersistedSnapshot as y, resolveReferencedActor as z };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}